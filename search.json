[{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":"Copyright 2025 Clément Laverdet  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_construct_corpus.html","id":"constructing-your-corpus","dir":"Articles","previous_headings":"","what":"Constructing your corpus","title":"Turn a programming project into a corpus","text":"codexplor::construct_corpus offer standardized protocol turn programming project text-mining corpus, given : folder(s) path(s) /github repo(s) analyze ; programming language(s) - default 'R'.","code":"library(codexplor)  # 1) Construct a corpus without a Citations network   corp <- construct_corpus(\"./R/\", languages = \"R\") #> Warning in construct_corpus(\"./R/\", languages = \"R\"): The corpus.list is a NA #> value      str(corp, max.level = 1)  #>  logi NA # More examples : corpus <- construct_corpus( languages = \"R\" , repos =  \"clement-LVD/codexplor\",\"tidyverse/stringr\"))  corpus_py <- construct_corpus(repos = \"secdev/scapy\" , languages = \"Python\", .verbose = T) #take a while"},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_construct_corpus.html","id":"returned-list-of-data-frame","dir":"Articles","previous_headings":"Constructing your corpus","what":"Returned list of data.frame","title":"Turn a programming project into a corpus","text":"construct_corpus return corpus.list object, standard list df 2 corpus.lines 1 corpus.nodelist dataframe. Later add others dataframe citations.network internal dependancies. text-mining metrics already computed within line within document-level (e.g., number characters, words count). Depending considered dataframe","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_construct_corpus.html","id":"default-patterns-associated-with-languages","dir":"Articles","previous_headings":"Constructing your corpus","what":"Default patterns associated with languages","title":"Turn a programming project into a corpus","text":"given language, default standardized patterns used : default construct_corpus try analyze .R files. One several languages passed construct_corpus (e.g., “R”, “Python”, “Javascript”).","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_construct_corpus.html","id":"function-call-that-are-non-supported","dir":"Articles","previous_headings":"Constructing your corpus","what":"Function call that are non-supported","title":"Turn a programming project into a corpus","text":"way writing program fully supported, : Python instantiated methods. instantiated Python methods supported now, .e. obj.method().","code":"#  Python code herafter : unmatched function called class A:     def method(self):         return \"My custom method\"  obj = A() obj.method()  # codexplor don't see that internal dependancy since the method() had a prefix (\"obj.\") #return : 'My custom method'"},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_construct_corpus.html","id":"about-duplicated-lines-associated-with-1st-matches","dir":"Articles","previous_headings":"Constructing your corpus","what":"About duplicated lines associated with 1st matches","title":"Turn a programming project into a corpus","text":"construct_corpus perform 1st text-extraction, accordingly pattern. 1st matches extraction, lines duplicated several matches found line. example, default, names functions defined files project extracted 1st match operated construct_corpus. file several function defined within line, line duplicated returned df, several ‘matches’ entries along lines identical line_number.","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_doc_network_from_project.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Turn a Programming Project Into a Citations Network","text":"Given folders path(s) /github repo(s), compute citations network functions turn edgelist interactive dataviz’ networkD3 : default, get_networkd3_from_igraph colorize nodes accordingly indegrees. reveal local dependancies programming project (.e. functions used others files project). (codexplor functions network truncated) example, -common local dependancy inside tidyverse/stringr repo compat-types-check.R, […] see one codexplor file actually rely stringrmethod (.e. codexplor::str_extract_all_to_tidy_df.R rely stringr/extract.R). opposite true. Playing parameters reveal others insights, e.g., try color nodes accordingly outdegrees, order reveal high-level files project.","code":"net <- get_doc_network_from_project(repos =  c(\"tidyverse/stringr\", \"clement-lvd/codexplor\"))     # by default, codexplor deal with R project get_networkd3_from_igraph(net$citations_network)     # Return an interactive dataviz' from networkD3"},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_doc_network_from_project.html","id":"network-properties","dir":"Articles","previous_headings":"","what":"Network properties","title":"Turn a Programming Project Into a Citations Network","text":"returned network document--document citations network. networks basic properties, covered (e.g., citations network directed network). Regarding network computed codexplor::get_doc_network_from_project() : Nodes programming files, default network .R files. Edges go file calls function file function defined. Thus, typical programming project : Nodes files, mostly - - functions ; °← Indegree file “many files calling function(s) defined file” ; °→ Outdegree file “many functions used file” ; ⟲ Auto-mentioning refear ‘recursivity’ (codexplor default filter autolinks).","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_doc_network_from_project.html","id":"cascading-matching-operated-by-get_doc_network_from_project","dir":"Articles","previous_headings":"","what":"Cascading matching operated by get_doc_network_from_project","title":"Turn a Programming Project Into a Citations Network","text":"Assuming user indicated folder(s) /github repo(s), codexplor::get_doc_network_from_project() try perform ‘cascading matching’ : ⏩ Read files extract 1st pattern, e.g., default supposed extract R functions names. ⏩ Search patterns initial content, order constitute Citations Network. 🎁 Return edgelist network documents (programming file calling function => programming file function defined) codexplor default pattern aimed extract functions names files programming project.","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_doc_network_from_project.html","id":"filter-undesired-match","dir":"Articles","previous_headings":"","what":"Filter undesired match","title":"Turn a Programming Project Into a Citations Network","text":"Junk nodes needs excluded network. Typical “false positive” matches lines use name another function message, e.g. message(\"my_func() deprecated. use this_function() instead). get_doc_network_from_project offer several parameters dealing style writing program.","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_doc_network_from_project.html","id":"crafting-your-own-corpus-with-codexplor","dir":"Articles","previous_headings":"","what":"Crafting your own corpus with codexplor","title":"Turn a Programming Project Into a Citations Network","text":"Depending languages manage, ’ll want tweak ‘pattern’ used match function definition, since now codexplor support R programming language (languages planned). See vignette construct_corpus.","code":""},{"path":"https://clement-lvd.github.io/codexplor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer.","code":""},{"path":"https://clement-lvd.github.io/codexplor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). codexplor: Explore Dataviz' Programming Project. R package version 0.0.0.91, https://clement-lvd.github.io/codexplor/.","code":"@Manual{,   title = {codexplor: Explore And Dataviz' a Programming Project},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.0.0.91},   url = {https://clement-lvd.github.io/codexplor/}, }"},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"codexplor","dir":"","previous_headings":"","what":"Explore And Dataviz' a Programming Project","title":"Explore And Dataviz' a Programming Project","text":"🧰🔧🔨 codexplor WIP 🧰🔧🔨 codexplor offers R functions dedicated explore, analyze monitor programming project. Given programming project, codexplor compute standardized text mining metrics dataviz’ project : get rid global complexity network local dependancies, assess local complexity document-level metrics. codexplor help figure big picture programming project faster, manage efficiently.","code":""},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explore And Dataviz' a Programming Project","text":"can install development version codexplor ","code":"devtools::install_github(\"clement-LVD/codexplor\")"},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"example--dataviz-of-internal-dependancies","dir":"","previous_headings":"","what":"Example : dataviz’ of internal dependancies","title":"Explore And Dataviz' a Programming Project","text":"Return interactive dataviz’ internal dependancies within codexplor :  dataviz useful pinpointing start polishing loop, identifying functions impacted upcoming changes, […] assessing impact new dev loop project’s complexity.","code":"library(codexplor)   # 1) Construct a corpus and a Citations network   net <- get_doc_network_from_project(\"R/\", languages = \"R\")    # return a corpus.list object with 2 corpus.line, 1 corpus.nodelist & 1 citations.network # 2) Produce an interactive dataviz' dataviz <- get_networkd3_from_igraph(title_h1 = \"codexplor\",subtitle_h2 = \"graph of internal dependancies\"                                      , graph_igraph = net$citations.network)"},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Explore And Dataviz' a Programming Project","text":"codexplor compute several metrics, order gain global local insights programming project. Availables features :  Planned features :  Supported language(s) :  languages planned.","code":""},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Explore And Dataviz' a Programming Project","text":"WIP [🔧🔨] codexplor offers functions dedicated analyze programming project, accordingly several subanalysis tools. codexplor also offers helper functions, e.g., create filter network igraph package. default settings codexplor optimized analyzing project  language.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/add.stats.corpus.list.html","id":null,"dir":"Reference","previous_headings":"","what":"add network-metrics to nodelist & summarise a corpus.list — add.stats.corpus.list","title":"add network-metrics to nodelist & summarise a corpus.list — add.stats.corpus.list","text":"add network-metrics nodelist & summarise corpus.list","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/add.stats.corpus.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add network-metrics to nodelist & summarise a corpus.list — add.stats.corpus.list","text":"","code":"add.stats.corpus.list(corpus)"},{"path":"https://clement-lvd.github.io/codexplor/reference/add.stats.corpus.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add network-metrics to nodelist & summarise a corpus.list — add.stats.corpus.list","text":"corpus corpus.list list dataframes created construct_corpus().","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/add.stats.corpus.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add network-metrics to nodelist & summarise a corpus.list — add.stats.corpus.list","text":"dataframe class 'corpus.list'.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/compute_doc_network_from_corpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Citations Network of functions form a corpus_list dataframe — compute_doc_network_from_corpus","title":"Compute a Citations Network of functions form a corpus_list dataframe — compute_doc_network_from_corpus","text":"function read standard list data.frame (class corpus.list) select codes data.frame append Citations Network corpus (see hereafter). classes new entry data.frame citations.network","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/compute_doc_network_from_corpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Citations Network of functions form a corpus_list dataframe — compute_doc_network_from_corpus","text":"","code":"compute_doc_network_from_corpus(   corpus,   prefix_for_2nd_matches = \"\\\\b\",   suffix_for_2nd_matches = \"\\\\(\",   filter_egolink_within_a_file = TRUE,   file_path_from_colname = \"from\",   file_path_to_colname = \"to\",   function_matched_colname = \"function\",   line_number_matched_colname = \"line_number\",   content_matched_colname = \"content\",   order_fn_called_colname = \"order\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/compute_doc_network_from_corpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Citations Network of functions form a corpus_list dataframe — compute_doc_network_from_corpus","text":"corpus character corpus.list object construct_corpus function prefix_for_2nd_matches character string representing prefix add 1st match turned new regular expressions. default empty string. suffix_for_2nd_matches character string representing regex add suffix match, order complete regular expression. default empty string. filter_egolink_within_a_file logical, default = TRUE. logical value indicating whether filter results based \"ego links\" (document referring ) file_path_from_colname character, default = '' column name (string) representing \"\" file path result data frame. file_path_to_colname character, default = '' column name (string) representing \"\" file path result data frame. function_matched_colname character, default = 'function' column name matched text (default function name) result data frame. line_number_matched_colname character, default = 'line_number'  column name (string) line number second match result data frame. content_matched_colname character, default = 'content_matched' column name (string) full line match occurred. order_fn_called_colname character, default = 'order_call' order functions called file, based line number.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/compute_doc_network_from_corpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Citations Network of functions form a corpus_list dataframe — compute_doc_network_from_corpus","text":"list dataframe symbolizing edgelist document--document citations network character Citations Network - local file path GitHub URL call function. character Citations Network - local file path constructed GitHub URL function called defined. file_path character Corpus - local file path constructed GitHub URL. line_number integer Corpus - line number within file. content character content match occur (citations.network), within file (corpus.nodelist) line (corpus.lines). match character Corpus - matched text line, NA match.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/compute_doc_network_from_corpus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a Citations Network of functions form a corpus_list dataframe — compute_doc_network_from_corpus","text":"designed generate network text cascading text research, assuming 1st matches already realized construct_corpus : function craft pattern appending 1st matches (matches column elements) , eventually adding suffix prefix elements. perform direct extraction pattern, return corpus new data.frame class citations.network (document 2nd match => document 1st match). default, egolinks removed since filter_egolink_within_a_file default TRUE","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/compute_doc_network_from_corpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a Citations Network of functions form a corpus_list dataframe — compute_doc_network_from_corpus","text":"","code":"{ # Example with local folder path corpus <- construct_corpus(folders =  \"~\", languages = \"R\") corpus <- compute_doc_network_from_corpus(corpus) # Return a list of df (1st one is supposed to be an edgelist) # (from the file where a function is call => to the file were defined) } #> Error in sub(re, \"\", x, perl = TRUE): input string 8 is invalid UTF-8"},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a list of 3 Data Frames of Lines Readed From Files Within a Local GitHub Repositories and/or Local Folders — construct_corpus","title":"Construct a list of 3 Data Frames of Lines Readed From Files Within a Local GitHub Repositories and/or Local Folders — construct_corpus","text":"Given Language folder path(s) /github repo(s) Return list 3 dataframes. List additionnal corpus.list class. 3 df : (1) codes lines (2) comments lines, text-metrics line; (3) nodelist global metrics files.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a list of 3 Data Frames of Lines Readed From Files Within a Local GitHub Repositories and/or Local Folders — construct_corpus","text":"","code":"construct_corpus(   folders = NULL,   languages = \"R\",   repos = NULL,   .verbose = F,   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a list of 3 Data Frames of Lines Readed From Files Within a Local GitHub Repositories and/or Local Folders — construct_corpus","text":"folders character. Default = NULL. character vector local folder paths scan code files. languages character. Default = \"R\". character vector specifying programming language(s) include corpus. repos character. Default = NULL. character vector GitHub repository URLs repository identifiers extract files (e.g., \"user/repo\"). .verbose logical. Default = TRUE. logical used silent message console. ... Additional arguments passed srch_pattern_in_files_get_df (filtering options, depth folder scanning, names returned df columns, .verbose parameter, etc.).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a list of 3 Data Frames of Lines Readed From Files Within a Local GitHub Repositories and/or Local Folders — construct_corpus","text":"list 3 data.frame containing corpus collected files first nodelist : codes comments (data.frame class corpus.lines) nodelist (data.frame class corpus.nodelist) data frames typically includes columns : file_path character local file path constructed GitHub URL. line_number integer line number file. content character content line file (corpus.nodelist full content file ). file_ext character File extension file. n_char integer Number characters - including spacing - line (file corpus.nodelist df). n_char_wo_space integer Number characters - without spacing - line (file corpus.nodelist df) n_word integer Number words line  (file corpus.nodelist df). n_vowel integer Number voyel line (file corpus.nodelist df). n_total_lines integer (corpus.nodelist df) Number lines files (without comments). n_total_lines integer (corpus.nodelist df) Number clines files without comments. matches character (codes df) 1st matched text, extracted accordingly pattern.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a list of 3 Data Frames of Lines Readed From Files Within a Local GitHub Repositories and/or Local Folders — construct_corpus","text":"folders provided (one list), function scans directories retrieves file paths matching specified languages. repos provided (one list), constructs URLs raw content files specified GitHub repositories. local paths GitHub URLs can combined final output. returned list tagged class corpus.list, contains following attributes: date_creation : Date Date indicating corpus list created (Sys.Date()). have_citations_network : logical indicating network internal dependancies processed (construct_corpus return citations_network set  FALSE) languages_patterns : dataframe default pattern associated requested languages, subset languages parameters entire list (e.g., file extension regex pattern function definition).","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a list of 3 Data Frames of Lines Readed From Files Within a Local GitHub Repositories and/or Local Folders — construct_corpus","text":"","code":"# Example 1: Construct a corpus from local folders  corpus <- construct_corpus(folders = \"~\", languages = c( \"R\")) #> Error in sub(re, \"\", x, perl = TRUE): input string 8 is invalid UTF-8  # corpus <- construct_corpus(folders = \"~\", languages = c(\"Python\",\"Javascript\")) if (FALSE) { # \\dontrun{ # Example 2: Construct a corpus from GitHub repositories (default is R) cr2 <- construct_corpus(repos = c(\"tidyverse/stringr\", \"tidyverse/readr\") )  # Example 3: Combine local folders and GitHub repositories cr3 <- construct_corpus(\"~\", \"R\", c(\"tidyverse/stringr\", \"tidyverse/readr\")) } # }"},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a corpus.lines dataframe — .construct.corpus.lines","title":"Construct a corpus.lines dataframe — .construct.corpus.lines","text":"Construct corpus.lines dataframe","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a corpus.lines dataframe — .construct.corpus.lines","text":"","code":".construct.corpus.lines(df)"},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a corpus.lines dataframe — .construct.corpus.lines","text":"df dataframe containing 'line_text' column.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a corpus.lines dataframe — .construct.corpus.lines","text":"dataframe class 'corpus.lines'.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a corpus.list from a list or append a dataframe to a corpus.list — .construct.corpus.list","title":"Create a corpus.list from a list or append a dataframe to a corpus.list — .construct.corpus.list","text":"Create corpus.list list append dataframe corpus.list","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a corpus.list from a list or append a dataframe to a corpus.list — .construct.corpus.list","text":"","code":".construct.corpus.list(   corpus,   df_to_add = NULL,   names_of_df_to_add = NULL,   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a corpus.list from a list or append a dataframe to a corpus.list — .construct.corpus.list","text":"corpus corpus.list list dataframes created construct_corpus(). df_to_add list data.frame single data.frame append corpus.list. data.frame(s) without name provided, names provided names_of_df_to_add names_of_df_to_add character vector names append corpus.list, anonymous materials provided (unamed df list unamed df). ... Additionnal attributes (e.g., keep trace languages analyzed).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.corpus.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a corpus.list from a list or append a dataframe to a corpus.list — .construct.corpus.list","text":"dataframe class 'corpus.list'.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a corpus.nodelist dataframe — .construct.nodelist","title":"Construct a corpus.nodelist dataframe — .construct.nodelist","text":"Construct corpus.nodelist dataframe","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a corpus.nodelist dataframe — .construct.nodelist","text":"","code":".construct.nodelist(df)"},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.nodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a corpus.nodelist dataframe — .construct.nodelist","text":"df dataframe containing 'line_text' column.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/dot-construct.nodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a corpus.nodelist dataframe — .construct.nodelist","text":"dataframe class 'corpus.nodelist'.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"Given igraph object pattern (regex), function return ego-subgraph node(s), within specified depths . graph directed, nodes filtered ego-network within specified depths","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"","code":"filter_igraph_egonetwork(   graph_igraph,   regex,   degrees_in_filter = 2,   degrees_out_filter = 2 )"},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"graph_igraph igraph object representing graph. regex character character string representing regex pattern filter nodes. degrees_in_filter integer, default = 2. integer specifying depth inward reachable nodes (default 2). degrees_out_filter integer, default = 2. integer specifying depth outward reachable nodes (default 2).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"igraph object representing filtered subgraph.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"","code":"g <- igraph::make_ring(10, directed = TRUE) igraph::V(g)$name <- as.character(1:10) subg_2_lvl_out <- filter_igraph_egonetwork(g,  regex= \"1$\", 0, 2) plot(subg_2_lvl_out)"},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":null,"dir":"Reference","previous_headings":"","what":"Escape the special characters in a string — fix_escaping","title":"Escape the special characters in a string — fix_escaping","text":"function adds designated number escape characters (\\) special characters.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Escape the special characters in a string — fix_escaping","text":"","code":"fix_escaping(   text,   special_chars = c(\"(\", \")\", \".\", \"{\", \"}\", \"[\", \"]\"),   num_escapes = 2,   use.names = F )"},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Escape the special characters in a string — fix_escaping","text":"text character string process. special_chars character vector special characters need escaping. Defaults \".\", \"(\",   \"{\",\"}\",  \"[\", \"]\", \")\" num_escapes Integer. Required number \\ special character. use.names Boolean named list preserved name returned. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Escape the special characters in a string — fix_escaping","text":"corrected string right number escape characters.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Escape the special characters in a string — fix_escaping","text":"","code":"rgx <- fix_escaping(\"This (is) (a) test.\", special_chars = c(\"(\", \")\", \"?\"), num_escapes = 4) # Returns: \"This \\\\(is\\\\) \\\\(a\\\\) test.\""},{"path":"https://clement-lvd.github.io/codexplor/reference/gather_df_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate text by a common key — gather_df_lines","title":"Concatenate text by a common key — gather_df_lines","text":"function concatenates text spread across multiple rows based common key, using base R functions.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/gather_df_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate text by a common key — gather_df_lines","text":"","code":"gather_df_lines(   df,   key_colname,   text,   sep = \" \",   trimws = T,   text_colname = \"content\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/gather_df_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate text by a common key — gather_df_lines","text":"df data.frame containing data key_colname character column used grouping key (character string) text character column containing text concatenated (character string) sep character separator used concatenate text (default \" \") trimws logical, default = TRUE TRUE, suppress leading, tail double white spaces text_colname character colname concatened text column (default \"content\")","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/gather_df_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate text by a common key — gather_df_lines","text":"data.frame text concatenated key","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/gather_df_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate text by a common key — gather_df_lines","text":"","code":"# Create a sample data.frame #df <- data.frame(id = c(1, 1, 1, 2, 2, 3), # text = c(\"Hello \", \"world \", \" !\", \"How\", \"are    you?\", \" Test \")) # Use the function to concatenate text by 'id' # gather_df_lines(df, key = \"id\", text = \"text\")"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_citations_network_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Citations Network from Data Frame — get_citations_network_from_df","title":"Construct a Citations Network from Data Frame — get_citations_network_from_df","text":"Given dataframe user, function extracts network citations searching patterns. function 1st construct pattern adding prefix suffix text pattern_varname column pattern searched content_varname column, returning df \"line number\" match occured","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_citations_network_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Citations Network from Data Frame — get_citations_network_from_df","text":"","code":"get_citations_network_from_df(   df,   content_varname = \"content\",   pattern_varname = \"first_match\",   prefix_for_regex_from_string = \"\",   suffix_for_regex_from_string = \"\",   keep_only_row_without_a_pattern = TRUE,   varname_for_matches = \"matches\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_citations_network_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Citations Network from Data Frame — get_citations_network_from_df","text":"df data frame containing data processed. content_varname character, default = \"content\" character string specifying name column containing text searched. Default \"content\". pattern_varname, default = \"first_match\" character string specifying name column containing patterns matched. Default \"first_match\". prefix_for_regex_from_string character, default = \"\" character string used prefix regex pattern. suffix_for_regex_from_string character, default =  \"\" character string used suffix regex pattern. keep_only_row_without_a_pattern logical, default = TRUE TRUE, keeps rows initial entry constructing pattern (.e. lines character pattern_varname column df passed user filter ) varname_for_matches character, default = \"matches\" character string specifying name column matches returned df.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_citations_network_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Citations Network from Data Frame — get_citations_network_from_df","text":"data frame extracted citations network.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_citations_network_from_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Citations Network from Data Frame — get_citations_network_from_df","text":"returned data frame 5 columns: row_number row number original data frame text matched. matches text matched pattern, e.g., name person. content text content pattern searched, .e. column identified content_varname first_match original pattern searched (full NA keep_only_row_without_a_pattern TRUE)","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/get_citations_network_from_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Citations Network from Data Frame — get_citations_network_from_df","text":"","code":"df <- data.frame(content = c(\"Citation (Bob, 2021)\", \"Another Bob\"), first_match = c(\"Bob\" , NA)) get_citations_network_from_df(df  ) # Return only the 2nd line (match 'Bob') #>   row_number matches     content first_match #> 2          2     Bob Another Bob        <NA> get_citations_network_from_df(df,  keep_only_row_without_a_pattern = FALSE) #>   row_number matches              content first_match #> 1          1     Bob Citation (Bob, 2021)         Bob #> 2          2     Bob          Another Bob        <NA> #will return the lines (matching 'Bob')"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_def_regex_by_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve function definition regex patterns by programming language(s) — get_def_regex_by_language","title":"Retrieve function definition regex patterns by programming language(s) — get_def_regex_by_language","text":"function returns df informations language (row), e.g., file extensions associated regex pattern matching commented lines functions definitions) one specified programming languages.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_def_regex_by_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve function definition regex patterns by programming language(s) — get_def_regex_by_language","text":"","code":"get_def_regex_by_language(languages = NULL, ...)"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_def_regex_by_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve function definition regex patterns by programming language(s) — get_def_regex_by_language","text":"languages character, default = \"R\" programming language match (character strings). ... character One programming language names (character strings).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_def_regex_by_language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve function definition regex patterns by programming language(s) — get_def_regex_by_language","text":"list entry corresponds language contains: language character name language row, e.g., 'R'. fn_regex character regex dedicated catch function names, soon function defined within file. file_extension character typical programming file extension, e.g., \".R\" R language. commented_line_char character pattern symbolizing commented line, .e. content commented pattern. delim_pair character list indicating - open close - characters symbolizes multi-lines comment, addition commented_line_char one-liner syntax. pattern_to_exclude character pattern typical programming files exclude analyses, e.g., \"\\\\.Rcheck|test-|vignettes\" R language.} \\item{\\code{local_file_ext}}{characterThe typical programming file extension turned regex, pasting\"$\"end offile_extension` value.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_def_regex_by_language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve function definition regex patterns by programming language(s) — get_def_regex_by_language","text":"function supports multiple languages single call. Language names case-insensitive.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_def_regex_by_language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve function definition regex patterns by programming language(s) — get_def_regex_by_language","text":"","code":"fn_def <- get_def_regex_by_language(\"Python\", \"R\" ,  \"C\", \"JavaScript\") names(fn_def) ; str(fn_def[[1]]) #> [1] \"R\"          \"Python\"     \"JavaScript\" \"C\"          #> List of 6 #>  $ fn_regex           : chr \"(^| \\\\.|\\\\b)([A-Za-z0-9_\\\\.]+)(?=\\\\s*(?:<-)\\\\s*function)\" #>  $ file_extension     : chr \".R\" #>  $ commented_line_char: chr \"\\\\s?#\" #>  $ delim_pair         : logi NA #>  $ pattern_to_exclude : chr \"\\\\.Rcheck|test-|vignettes\" #>  $ local_file_ext     : chr \".R$\""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_doc_network_from_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a programing project into a Documents Network — get_doc_network_from_project","title":"Turn a programing project into a Documents Network — get_doc_network_from_project","text":"function craft corpus, according default settings. return corpus citations network internal dependancies","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_doc_network_from_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a programing project into a Documents Network — get_doc_network_from_project","text":"","code":"get_doc_network_from_project(   folders = NULL,   repos = NULL,   languages = \"R\",   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_doc_network_from_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a programing project into a Documents Network — get_doc_network_from_project","text":"folders character string list representing path(s) local folders path read. repos character string list representing name(s) github repos (e.g., 'tidyverse/stringr'). languages character. Default = \"R\". character vector specifying programming language(s) include corpus. ... Parameters passed compute_doc_network_from_corpus(). parameters characters values, order add prefix suffix pattern searched (e.g., suffix_for_2nd_matches) changing colnames (e.g., file_path_from_colname). logical values, e.g., \"filter_egolink_within_a_file\" (default = TRUE)","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_doc_network_from_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a programing project into a Documents Network — get_doc_network_from_project","text":"list 4 dataframe : 2 class corpus.lines, 1 corpus.nodelist 1 citations.network (symbolizing edgelist document--document citations network within programming project) character citations.network - local file path GitHub URL call function. character citations.network - local file path constructed GitHub URL function called defined. function character citations.network - name function matched line. content_matched character citations.network - full content matched 2nd matches, order verify craft new regex. line_number character citations.network & corpus.lines - line number 2nd match (citation.network) associated line (corpus.lines). file_path character corpus.lines & corpus.nodelist - local file path constructed GitHub URL, values & columns citations.network df. content character corpus.lines - content line. matches character corpus.lines (specifically codes data.frame) matched text 1st matches (full NA match filtered , default).","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/get_doc_network_from_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a programing project into a Documents Network — get_doc_network_from_project","text":"","code":"# Example with url from github result <- get_doc_network_from_project(folder =  \"~\" ) #> Error in sub(re, \"\", x, perl = TRUE): input string 8 is invalid UTF-8 # Return a list of df # (from the file where a function is call => to the file were defined)"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"function retrieves full URLs files GitHub repository match specified pattern.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"","code":"get_github_raw_filespath(   repo = \"tidyverse/stringr\",   branch = NULL,   pattern = \"\\\\.R\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"repo (character) GitHub repository format \"owner/repo\". Default \"tidyverse/stringr\". Return list user passed list named char (names repo list passed) branch (character) branch scan files. Default \"main\". pattern (character) regex pattern filter files (default \"\\\\.R\", meaning R scripts). Return list named char user passed list patterns (NA returned pattern associated github files)","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"character vector URLs matching files (https://raw.githubusercontent.com/).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"","code":"if (FALSE) { # \\dontrun{ readr_fp <- get_github_raw_filespath(repo = \"tidyverse/stringr\", pattern = \"\\\\.R\") } # }"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an edge list into an igraph network — get_igraph_from_df","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"function takes data frame representing edge list converts igraph object. allows filtering nodes based centrality (filter orphan default). construct directed network","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"","code":"get_igraph_from_df(   edgelist,   directed = T,   filter_min_centrality = 0,   clean_egolink = T,   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"edgelist data.frame data frame containing least two columns representing edges (source target nodes). directed logical, default = TRUE Indicates whether graph directed (TRUE) undirected (FALSE). filter_min_centrality numeric, default = 0 (filter orphans) Strict minimum total degree (sum -degree -degree) required keep node. indicate -1 keep orphans (.e. degree = '0') clean_egolink logical, default = TRUE TRUE, self-loops (edges == ) removed edge list processing. ... Additional arguments passed igraph::graph_from_dataframe node selection (e.g., ignore.case = TRUE).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"igraph object representing processed graph.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"Step 1: Cleans edge list (removes self-loops clean_egolink = TRUE). Step 2: Constructs igraph object. Step 3: Filters nodes total degree filter_min_centrality. Step 4 (optional): Extracts subgraph based made_subgraph_from_a_regex ego-level constraints.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"","code":"# Example edge list edgelist <- data.frame(from = c(\"A\", \"B\", \"C\", \"D\", \"E\"),                        to   = c(\"B\", \"C\", \"A\", \"A\", \"A\"))  # Create a directed igraph object with minimal filtering g <- get_igraph_from_df(edgelist, directed = TRUE)  # Create an undirected graph with a degree filter g <- get_igraph_from_df(edgelist, directed = FALSE, filter_min_centrality = 2)"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"function transforms igraph graph object networkD3 interactive visualization. allows customization titles, node colors, missing link colors, additional HTML code insertion.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"","code":"get_networkd3_from_igraph(   graph_igraph,   title_h1 = \"networkD3\",   subtitle_h2 = NULL,   endnotes_h3 = NULL,   colors_for_nodes = c(\"green\", \"grey\", \"black\", \"red\"),   color_outdeg_instead_of_indeg = F,   color_for_na_link = colors_for_nodes[[1]],   add_html_div_code_before_graph = NULL,   charge = -200,   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"graph_igraph igraph object representing network. title_h1 character. main title (HTML <h1>) displayed graph. Default \"networkD3\". subtitle_h2 character (optional). subtitle (HTML <h2>) displayed main title. Default NULL (subtitle). endnotes_h3 character (optional). description note (HTML <h3>) displayed network. Default NULL (text). colors_for_nodes character vector. Specifies colors nodes based degree also number separation func' try realize (based indegrees outdegrees). Default c(\"green\", \"grey\", \"black\", \"red\"). color_outdeg_instead_of_indeg logical. TRUE, node colors assigned based -degree instead -degree. Default FALSE. color_for_na_link character. Color assigned links data missing. Default 1st color colors_for_node (\"green\"). add_html_div_code_before_graph character (optional). Custom HTML code inserted end network. Default NULL (additional HTML). charge integer, default = -200 Numeric value indicating either strength node repulsion (negative value) attraction (positive value). Passed networkD3::forceNetwork. ... optional parameter passed networkD3::forceNetwork","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"\"forceNetwork\" & \"htmlwidget\" object, .e. list symbolize html object networkD3::forceNetwork","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"","code":"invisible(library(igraph)) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union g <- make_ring(10) get_networkd3_from_igraph(g, title_h1 = \"My Network\") My Network     Colors (indegree) {\"x\":{\"links\":{\"source\":[0,1,2,3,4,5,6,7,0,8],\"target\":[1,2,3,4,5,6,7,8,9,9],\"colour\":[\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\"]},\"nodes\":{\"name\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],\"group\":[2,2,2,2,2,2,2,2,2,2],\"nodesize\":[2,2,2,2,2,2,2,2,2,2]},\"options\":{\"NodeID\":\"name\",\"Group\":\"indegree\",\"colourScale\":\"d3.scaleLinear().domain([2]).range([\\\"green\\\", \\\"grey\\\", \\\"black\\\", \\\"red\\\"]).clamp(true);\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"function(d) { return 1; }\",\"charge\":-200,\"opacity\":1,\"zoom\":true,\"legend\":false,\"arrows\":true,\"nodesize\":true,\"radiusCalculation\":\" Math.sqrt(d.nodesize)+6\",\"bounded\":true,\"opacityNoHover\":0.9,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Regular Expression from a Character Vector — get_regex_from_vector","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"function takes vector strings returns concatenated regular expression pattern. allows adding prefix /suffix element escaping special characters.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"","code":"get_regex_from_vector(   vector,   prefix_for_regex = \"\",   suffix_for_regex = \"\",   fix_escaping = TRUE,   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"vector character vector containing elements convert regular expression. prefix_for_regex string prepend element vector regex pattern. suffix_for_regex string append element vector regex pattern. fix_escaping boolean, indicating escaping fixed. Default TRUE ... Passed fix_escaping","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"single character string containing regular expression pattern created concatenating elements input vector, specified prefix suffix applied, special characters escaped.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"list special_chars_to_escape, number escaping char. add (default num_escapes = 2), escaping char. consider, etc.","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"","code":"# Example 1: Create a regex pattern for a vector of words words <- c(\"apple\", \"banana\", \"cherry\") rgx <- get_regex_from_vector(words, \"^\", \"$\")  # Example 2: Create a regex pattern for words with escaped parentheses words <- c(\"foo(bar)\", \"baz(qux)\") rgx <- get_regex_from_vector(words, \"(\", \")?\", c(\"(\", \")\"), fix_escaping = TRUE) #here we don't escape our custom pattern \"(\" and \")?\" even if escaping of other will be fixed"},{"path":"https://clement-lvd.github.io/codexplor/reference/move_networkd3_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Move the responsive legend of a networkD3 plot and set vertical or horizontal orientation — move_networkd3_legend","title":"Move the responsive legend of a networkD3 plot and set vertical or horizontal orientation — move_networkd3_legend","text":"function allows dynamically position legend networkD3 plot. legend positioned percentage x y coordinates relative size plot. addition, can choose whether legend items arranged vertically (default) horizontally.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/move_networkd3_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move the responsive legend of a networkD3 plot and set vertical or horizontal orientation — move_networkd3_legend","text":"","code":"move_networkd3_legend(   netd3,   x_pos = 0.85,   y_pos = 0.5,   legend_spacing = 25,   align = \"left\",   orientation = \"vertical\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/move_networkd3_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move the responsive legend of a networkD3 plot and set vertical or horizontal orientation — move_networkd3_legend","text":"netd3 object class networkD3 (specifically forceNetwork). x_pos numeric. numeric value 0 1 defines horizontal position legend. 0 far left, 1 far right plot. Default 0.85. y_pos numeric. numeric value 0 1 defines vertical position legend. 0 top, 1 bottom plot. Default 0.5 (centered). legend_spacing numeric. numeric value controlling spacing legend items (pixels). Default 25 px. align character. character string controlling horizontal alignment legend items. Possible values \"left\", \"center\", \"right\". Default \"left\". orientation character. character string legend layout. Either \"vertical\" (default) \"horizontal\".","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/move_networkd3_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move the responsive legend of a networkD3 plot and set vertical or horizontal orientation — move_networkd3_legend","text":"networkD3 object legend positioned according specified options.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/move_networkd3_legend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move the responsive legend of a networkD3 plot and set vertical or horizontal orientation — move_networkd3_legend","text":"","code":"library(networkD3) nodes <- data.frame(name = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\")) links <- data.frame(source = c(0, 1, 2, 3, 4),                     target = c(1, 2, 3, 4, 5),                     value = c(1, 1, 1, 1, 1))  netd3 <- forceNetwork(Links = links, Nodes = nodes,                       Source = \"source\", Target = \"target\",                       Value = \"value\", NodeID = \"name\",                       legend = TRUE, Group = \"name\")  # Vertical legend (default) netd3_v <- move_networkd3_legend(netd3, x_pos = 0.2, y_pos = 0.3, legend_spacing = 35)  # Horizontal legend netd3_h <- move_networkd3_legend(netd3, x_pos = 0.4, y_pos = 1, orientation = \"horizontal\")"},{"path":"https://clement-lvd.github.io/codexplor/reference/print.corpus.lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for corpus.lines — print.corpus.lines","title":"Print Method for corpus.lines — print.corpus.lines","text":"Custom print method objects class 'corpus.lines'. Adds header printing object.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/print.corpus.lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for corpus.lines — print.corpus.lines","text":"","code":"# S3 method for class 'corpus.lines' print(x, ...)"},{"path":"https://clement-lvd.github.io/codexplor/reference/print.corpus.lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for corpus.lines — print.corpus.lines","text":"x object class 'corpus.lines'. ... Additional parameters print function.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/print.corpus.nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for corpus_lines — print.corpus.nodelist","title":"Print Method for corpus_lines — print.corpus.nodelist","text":"Custom print method objects class 'corpus.nodelist'. Adds header printing object.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/print.corpus.nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for corpus_lines — print.corpus.nodelist","text":"","code":"# S3 method for class 'corpus.nodelist' print(x, ...)"},{"path":"https://clement-lvd.github.io/codexplor/reference/print.corpus.nodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for corpus_lines — print.corpus.nodelist","text":"x object class 'corpus.nodelist'. ... Additional parameters print function.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/print.corpus.nodelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print Method for corpus_lines — print.corpus.nodelist","text":"Print corpus.nodelist dataframe","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Read text file with readLines and answer a df — readlines_in_df","title":"Read text file with readLines and answer a df — readlines_in_df","text":"function reads content text file line line stores data frame. must pick FIRST col' file_path readed, LAST col content readed intermediar additionnal info, .e. line_number","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read text file with readLines and answer a df — readlines_in_df","text":"","code":"readlines_in_df(   files_path,   return_lowered_text = FALSE,   .verbose = TRUE,   file_path_col_name = \"file_path\",   content_col_name = \"content\",   line_number_col_name = \"line_number\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read text file with readLines and answer a df — readlines_in_df","text":"files_path character Path(s) url(s) text files read. return_lowered_text logical, default = FALSE TRUE lowercasing returned text. FALSE (default) preserve readed text .verbose logical, default = TRUE TRUE, shows progress bar reading file. file_path_col_name character, default = \"file_path\" Column name file path output dataframe. content_col_name character, default = \"content\" Column name file content output dataframe. line_number_col_name character, default = \"line_number\" Column name line numbers output dataframe.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read text file with readLines and answer a df — readlines_in_df","text":"Return data.frame 3 columns. last column (content default) contain readed lines file. file_path character Path file match found. line_number integer Line number file. content character Content line.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read text file with readLines and answer a df — readlines_in_df","text":"","code":"if (FALSE) { # \\dontrun{   df <- readlines_in_df(\"path/to/file.R\", case.sensitive = TRUE)   contents_readed <- df[[ncol(df)]]   file_path_readed <-  df[[1]] } # }"},{"path":"https://clement-lvd.github.io/codexplor/reference/separate_commented_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate commented and non-commented lines from text — separate_commented_lines","title":"Separate commented and non-commented lines from text — separate_commented_lines","text":"function extracts separates commented non-commented parts given vector texts. uses specified delimiter pair identify comments returns data frame full text, extracted comments, remaining code lines.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/separate_commented_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate commented and non-commented lines from text — separate_commented_lines","text":"","code":"separate_commented_lines(texts, delim_pair = c(`/*` = \"*/\"), .verbose = T)"},{"path":"https://clement-lvd.github.io/codexplor/reference/separate_commented_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate commented and non-commented lines from text — separate_commented_lines","text":"texts character vector containing text possible comments. delim_pair character named character vector length 1, name opening delimiter (e.g., \"/*\") value closing delimiter (e.g., \"*/\"). .verbose logical, default = TRUE Return progress bar set TRUE","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/separate_commented_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate commented and non-commented lines from text — separate_commented_lines","text":"data frame three columns: text original text. comments extracted comments, concatenated together multiple found. codelines remaining text removing comments.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/separate_commented_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate commented and non-commented lines from text — separate_commented_lines","text":"","code":"texts <- c(   \"Code snippet /* first comment */ and more code /* second comment */\",   \"Another line /* only a comment */\",   \"A line with no comments\" )  separate_commented_lines(texts, delim_pair = c(\"/*\" = \"*/\"), .verbose = FALSE) #>                                                                  text #> 1 Code snippet /* first comment */ and more code /* second comment */ #> 2                                   Another line /* only a comment */ #> 3                                             A line with no comments #>                                  comments                    codelines #> 1 /* first comment *//* second comment */ Code snippet  and more code  #> 2                    /* only a comment */                Another line  #> 3                                    <NA>      A line with no comments"},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to match a text pattern in a df column by only extract the text — srch_pattern_in_df","title":"Try to match a text pattern in a df column by only extract the text — srch_pattern_in_df","text":"Read files answer content readed df. try extract pattern return extracted text column returned df (NA meaning 'match').","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to match a text pattern in a df column by only extract the text — srch_pattern_in_df","text":"","code":"srch_pattern_in_df(   df,   content_col_name = \"content\",   pattern = \"(^| \\\\.|\\\\b)([\\\\.A-Za-z0-9_]+)(?=\\\\s*(?:<-)\\\\s*function)\",   match_to_exclude = NULL,   ignore_match_less_than_nchar = 3,   extracted_txt_col_name = \"matches\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to match a text pattern in a df column by only extract the text — srch_pattern_in_df","text":"df data.frame data.frame minima character column. content_col_name character, default = \"content\" Name text column input df (returned output df). pattern character, default = \"\\\\b([-Za-z0-9_]+)(?=\\\\s*(?:<-|=)\\\\s*(?:function|$))\" regex matching lines extract text. match_to_exclude character vector values returned match. rows values match element vector removed. ignore_match_less_than_nchar double, default = 2 Excluding match depending char. number matched text (strictly inferior) Default exclude match 1 char 'x'. extracted_txt_col_name character, default = \"matches\" Column name extracted text (last col' returned df)","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try to match a text pattern in a df column by only extract the text — srch_pattern_in_df","text":"data.frame similar one passed user 1 column : match ; minima : content character text column designed user. match character matched text line, NA match.","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"function applies stringr::str_extract_all() string, extracts regex matches, returns 2 columns unested dataframe : 1st column matched text NA value match (default filter non-matched lines) 2nd column corresponding position index Option offered : customizable column names filtering unmatched result (default)","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"","code":"str_extract_all_to_tidy_df(   string,   pattern,   filter_unmatched = T,   matches_colname = \"matches\",   row_number_colname = \"row_number\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"string character vector. character vector containing input text. pattern character. regex pattern extract matches. filter_unmatched logical (default TRUE). TRUE, removes unmatched values output. matches_colname character. string specifying column name extracted matches (default: \"matches\"). row_number_colname character. string specifying column name row numbers (default: \"row_number\").","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"dataframe extracted matches corresponding row numbers. matches_colname Name 1st col' - matched-text - correspond matches_colname parameter (default 'matches') row_number_colname Name 2nd col correspond row_number_colname parameter (default 'row_number')","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"","code":"text_data <- c(\"Here is funcA and funcB\", \"Nothing here\", \"funcC is present\") pattern <- \"func[A-C]\" result_df <- str_extract_all_to_tidy_df(text_data, pattern) print(result_df) #>   matches row_number #> 1   funcA          1 #> 2   funcB          1 #> 3   funcC          3"}]
