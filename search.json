[{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":"Copyright 2025 Clément Laverdet  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://clement-lvd.github.io/codexplor/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/construct_a_corpus.html","id":"constructing-your-corpus","dir":"Articles","previous_headings":"","what":"Constructing your corpus","title":"Turn a programming project into a corpus","text":"codexplor offering functions turn bunch files programming project corpus filter process analysis. provide folder(s) path(s) /github repo(s), one several languages construct_corpus construct_corpus return full content df. 1st matches already realized since names functions defined files project extracted column returned df (user supposed define several function line, otherwise lines duplicated). Indicating language construct_corpus needed, e.g., order read programming files accordingly extensions. order extract “functions names”, construct_corpus rely regex language. Planned languages : R• Python• JavaScript• Java• C• Cpp• Go","code":"corpus <- codexplor::construct_corpus(\"~\", \"tidyverse/stringr\", languages = \"R\") nrow(corpus); length(unique(corpus$matches)) # content + a 1st matched pattern"},{"path":"https://clement-lvd.github.io/codexplor/articles/manage_igraph_object.html","id":"managing-igraph-object","dir":"Articles","previous_headings":"","what":"Managing igraph object","title":"Helper functions to create and filter igraph objects","text":"codexplor offering functions manage igraph object. turn edgelist igraph object, filter across way. network network internal dependancies within project (see get_text_network_from_project) Turn Citations Network directed igraph network igraph object, zoom precise function ","code":"netig <- codexplor::get_igraph_from_df(net)"},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_text_network_from_project.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Turn a programming project into a text-network","text":"Network properties. returned network document--document citations network. networks basic properties, covered (e.g., citations network directed network). Regarding network computed codexplor::get_text_network_from_project() : Nodes programming files, default network .R files. Edges go file calls function file function defined. Thus, typical programming project : Nodes mostly - - functions °← Indegree node many functions project function using °→ Outdegree node many functions project used function. ⟲ Auto-mentioning refear ‘recursivity’, func’ call one times (1st mention usually define func’ name)","code":"net <- get_text_network_from_project(repos =  c(\"tidyverse/stringr\", \"clement-lvd/codexplor\")) # by default, codexplor deal with R project  # get an igraph object from this edgelist, and optionnaly filter it : igraph_network <- codexplor::get_igraph_from_df(net)   #get a networkD3 dataviz' from this edgelist : get_networkd3_from_igraph(net)"},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_text_network_from_project.html","id":"cascading-matching-operated","dir":"Articles","previous_headings":"","what":"Cascading matching operated","title":"Turn a programming project into a text-network","text":"codexplor default pattern aimed extract functions names files programming project. Assuming user indicated folder(s) /github repo(s), codexplor::get_text_network_from_project() try perform ‘cascading matching’ : ⏩ Read files extract 1st pattern, e.g., default try extract R functions names. ⏩ Search patterns initial content, order constitute Citations Network. 🎁 Return edgelist network documents (document call function => file function defined)","code":""},{"path":"https://clement-lvd.github.io/codexplor/articles/vignette_get_text_network_from_project.html","id":"filter-undesired-match","dir":"Articles","previous_headings":"","what":"Filter undesired match","title":"Turn a programming project into a text-network","text":"Junk nodes needs excluded network. Typical “false positive” matches lines use name another function message, e.g. message(\"my_func() deprecated. use this_function() instead). get_text_network_from_files offer several parameters dealing style writing program.","code":""},{"path":"https://clement-lvd.github.io/codexplor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer.","code":""},{"path":"https://clement-lvd.github.io/codexplor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). codexplor: Explore Dataviz' Programming Project. R package version 0.0.0.9000, https://clement-lvd.github.io/codexplor/.","code":"@Manual{,   title = {codexplor: Explore And Dataviz' a Programming Project},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://clement-lvd.github.io/codexplor/}, }"},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"codexplor","dir":"","previous_headings":"","what":"Explore And Dataviz' a Programming Project","title":"Explore And Dataviz' a Programming Project","text":"🧰🔧🔨 codexplor WIP 🧰🔧🔨 codexplor offers R functions explore, analyze monitor programming project. tools aimed manage programming project network documents, text-mining network metrics & dataviz’. immediate insights deep reports offered codexplor help understand big picture programming project faster, also manage efficiently.","code":""},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explore And Dataviz' a Programming Project","text":"can install development version codexplor ","code":"devtools::install_github(\"clement-LVD/codexplor\")"},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Explore And Dataviz' a Programming Project","text":"Available feature : Planned features : Supported programming languages : languages planned2.","code":""},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"example--explore-a-network-of-internal-dependancies","dir":"","previous_headings":"","what":"Example : Explore a network of internal dependancies","title":"Explore And Dataviz' a Programming Project","text":"Given folders path(s) /github repo(s), compute citations network functions See vignette get_text_network_from_project() Look interactive dataviz’ networkD3 : default, nodes colorized accordingly indegrees, order reveal local dependancies programming project (.e. functions used others files project). . (codexplor functions network truncated) Hereabove, see -common local dependancy inside tidyverse/stringr repo compat-types-check.R. One codexplor file actually rely stringrmethod, opposite true (.e. codexplor::str_extract_all_to_tidy_df.R rely stringr/extract.R, file stringr rely codexplor). Play parameters reveal others insights, e.g., try color nodes accordingly outdegrees, order reveal high-level files project. Get rid complexity broader perspective project !","code":"net <-  get_text_network_from_project(repos = c(\"tidyverse/stringr\", \"clement-LVD/codexplor\") )  # Return a data.frame, edgelist of a citations network codexplor::get_networkd3_from_igraph(net) # Return an interactive dataviz' from networkD3"},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Explore And Dataviz' a Programming Project","text":"codexplor offers text-mining protocols, also tools managing analysis. See vignettes : ⏩ Turning programming project corpus construct_corpus() ⏩ Turning edgelist igraph object filter helper functions manage igraph objects ⏩ Get metrics identifying problematic patterns (e.g., cascading dependancies func’) WIP [🔧🔨]","code":""},{"path":"https://clement-lvd.github.io/codexplor/index.html","id":"crafting-your-own-corpus-with-codexplor","dir":"","previous_headings":"Vignettes","what":"Crafting your own corpus with codexplor","title":"Explore And Dataviz' a Programming Project","text":"Depending languages manage, ’ll want tweak ‘pattern’ used match function definition, since now codexplor support R programming language (languages planned).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders — construct_corpus","title":"Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders — construct_corpus","text":"function builds structured data frame containing code files either GitHub repositories local folder paths. try extract function names lines previously readed , according default pattern designed matching functions names. resulting data frame provides overview collected content, including file paths, URLs (applicable), languages.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders — construct_corpus","text":"","code":"construct_corpus(   local_folders_paths = NULL,   languages = \"R\",   repos = NULL,   pattern_to_exclude_path = NULL,   autoclean_filespath = TRUE,   ignore_match_less_than_nchar = 3,   pattern_to_remove = \"https://raw.githubusercontent.com/\",   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders — construct_corpus","text":"local_folders_paths character. Default = NULL. character vector local folder paths scan code files. languages character. Default = \"R\". character vector specifying programming language(s) include corpus. repos character. Default = NULL. character vector GitHub repository URLs repository identifiers extract files (e.g., \"user/repo\"). pattern_to_exclude_path character. regular expression pattern exclude files scanning full names (path/filename.ext). Default NULL (files excluded). autoclean_filespath logical. Default = TRUE. Codexplor try exclude testing files read files project ; try clean urls returned df default, typical testing-purpose .R files excluded (.e. \"\\.Rcheck|test-\") , addition optional pattern_to_exclude_path passed user. ignore_match_less_than_nchar integer. Default = 3. Number characters 1st match considered valid. pattern_to_remove character Default = 'https://raw.githubusercontent.com/' pattern (regex) remove files path edgelist (columns 1 & 2) ... Additional arguments passed srch_pattern_in_files_get_df (filtering options, depth folder scanning, names returned df columns, .verbose parameter, etc.).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders — construct_corpus","text":"data frame containing corpus collected files. data frame typically includes columns : file_path Character. local file path constructed GitHub URL.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders — construct_corpus","text":"local_folders_paths provided (one list), function scans directories retrieves file paths matching specified languages. repos provided (one list), constructs URLs raw content files specified GitHub repositories. local paths GitHub URLs can combined final output.","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/construct_corpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders — construct_corpus","text":"","code":"# Example 1: Construct a corpus from local folders cr1 <- construct_corpus(\"~\", languages = c(\"R\", \"Python\"), .verbose = FALSE)  # Example 2: Construct a corpus from GitHub repositories cr2 <- construct_corpus(repos = c(\"tidyverse/stringr\", \"tidyverse/readr\"), .verbose = FALSE)  # Example 3: Combine local folders and GitHub repositories cr3 <- construct_corpus(\"~\", c(\"R\", \"Cpp\"), \"tidyverse/dplyr\", .verbose = FALSE)"},{"path":"https://clement-lvd.github.io/codexplor/reference/extract_txt_from_df_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts specified patterns from a dataframe column and returns the corresponding lines of the dataframe This function allows the extraction of a specified pattern from selected columns of a dataframe. The pattern extraction is applied to each row, and the results are returned as a new dataframe with the extracted patterns as a list in a new column. The function handles multiple patterns and will expand the dataframe by adding rows if necessary. In case of several pattern gived by the user, line will be multiplied if there is several matches on a line Only matching lines are returned (the default) or every line gived + eventually some new lines refleting several matches on a line — extract_txt_from_df_vars","title":"Extracts specified patterns from a dataframe column and returns the corresponding lines of the dataframe This function allows the extraction of a specified pattern from selected columns of a dataframe. The pattern extraction is applied to each row, and the results are returned as a new dataframe with the extracted patterns as a list in a new column. The function handles multiple patterns and will expand the dataframe by adding rows if necessary. In case of several pattern gived by the user, line will be multiplied if there is several matches on a line Only matching lines are returned (the default) or every line gived + eventually some new lines refleting several matches on a line — extract_txt_from_df_vars","text":"Extracts specified patterns dataframe column returns corresponding lines dataframe function allows extraction specified pattern selected columns dataframe. pattern extraction applied row, results returned new dataframe extracted patterns list new column. function handles multiple patterns expand dataframe adding rows necessary. case several pattern gived user, line multiplied several matches line matching lines returned (default) every line gived + eventually new lines refleting several matches line","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/extract_txt_from_df_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts specified patterns from a dataframe column and returns the corresponding lines of the dataframe This function allows the extraction of a specified pattern from selected columns of a dataframe. The pattern extraction is applied to each row, and the results are returned as a new dataframe with the extracted patterns as a list in a new column. The function handles multiple patterns and will expand the dataframe by adding rows if necessary. In case of several pattern gived by the user, line will be multiplied if there is several matches on a line Only matching lines are returned (the default) or every line gived + eventually some new lines refleting several matches on a line — extract_txt_from_df_vars","text":"","code":"extract_txt_from_df_vars(   df = NULL,   regex_extract_txt = NULL,   cols_for_searching_text = NULL,   keep_empty_results = T,   returned_col_name = \"to\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/extract_txt_from_df_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts specified patterns from a dataframe column and returns the corresponding lines of the dataframe This function allows the extraction of a specified pattern from selected columns of a dataframe. The pattern extraction is applied to each row, and the results are returned as a new dataframe with the extracted patterns as a list in a new column. The function handles multiple patterns and will expand the dataframe by adding rows if necessary. In case of several pattern gived by the user, line will be multiplied if there is several matches on a line Only matching lines are returned (the default) or every line gived + eventually some new lines refleting several matches on a line — extract_txt_from_df_vars","text":"df DataFrame. input dataframe patterns extracted. regex_extract_txt Character string. regular expression pattern extract text. cols_for_searching_text Character numeric vector. Specifies columns search patterns. keep_empty_results logical, default = T Logical: Whether keep rows matches (default TRUE). returned_col_name character, default = \"\": name new column contain matches (default \"\").","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/extract_txt_from_df_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts specified patterns from a dataframe column and returns the corresponding lines of the dataframe This function allows the extraction of a specified pattern from selected columns of a dataframe. The pattern extraction is applied to each row, and the results are returned as a new dataframe with the extracted patterns as a list in a new column. The function handles multiple patterns and will expand the dataframe by adding rows if necessary. In case of several pattern gived by the user, line will be multiplied if there is several matches on a line Only matching lines are returned (the default) or every line gived + eventually some new lines refleting several matches on a line — extract_txt_from_df_vars","text":"dataframe additional column containing extracted patterns row.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/extract_txt_from_df_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts specified patterns from a dataframe column and returns the corresponding lines of the dataframe This function allows the extraction of a specified pattern from selected columns of a dataframe. The pattern extraction is applied to each row, and the results are returned as a new dataframe with the extracted patterns as a list in a new column. The function handles multiple patterns and will expand the dataframe by adding rows if necessary. In case of several pattern gived by the user, line will be multiplied if there is several matches on a line Only matching lines are returned (the default) or every line gived + eventually some new lines refleting several matches on a line — extract_txt_from_df_vars","text":"","code":"# Example usage df <- data.frame(A = c(\"Hello World\", \"Pattern matching here\", \"Test123\"),                  B = c(\"This is a test\", \"Hello World again\", \"Pattern not found\")) extract_txt_from_df_vars(df, \"World|Hello\", cols_for_searching_text = 1:2) #>   row_num                     A                 B list_of_matched_txt    to #> 1       1           Hello World    This is a test        Hello, World Hello #> 2       1           Hello World    This is a test        Hello, World World #> 3       2 Pattern matching here Hello World again        Hello, World Hello #> 4       2 Pattern matching here Hello World again        Hello, World World #> 5       3               Test123 Pattern not found                      <NA> #If using 2 regex separated by \"|\" # It will return 5 lines : line #1 is duplicated on 2 lines (since there is 2 matches on line 1) # (i.e. from one single line with \"Hello Word\" to one line for matching 'hello' and one for 'world') # same for line #2, with 2 matches for 2 returned lines #Third line is returned despite no match, since keep_empty_results is T (default)"},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"Given igraph object pattern (regex), function return ego-subgraph node(s), within specified depths . graph directed, nodes filtered ego-network within specified depths","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"","code":"filter_igraph_egonetwork(   graph_igraph,   regex,   degrees_in_filter = 2,   degrees_out_filter = 2 )"},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"graph_igraph igraph object representing graph. regex character character string representing regex pattern filter nodes. degrees_in_filter integer, default = 2 integer specifying depth inward reachable nodes (default 2). degrees_out_filter integer, default = 2 integer specifying depth outward reachable nodes (default 2).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"igraph object representing filtered subgraph.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/filter_igraph_egonetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an ego-subgraph based on a regex pattern — filter_igraph_egonetwork","text":"","code":"g <- igraph::make_ring(10, directed = TRUE) igraph::V(g)$name <- as.character(1:10) subg_2_lvl_out <- filter_igraph_egonetwork(g,  regex= \"1$\", 0, 2) plot(subg_2_lvl_out)"},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":null,"dir":"Reference","previous_headings":"","what":"fix_escaping ensure correct escaping of special characters in a string — fix_escaping","title":"fix_escaping ensure correct escaping of special characters in a string — fix_escaping","text":"function adds designated number escape characters (\\) special characters.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fix_escaping ensure correct escaping of special characters in a string — fix_escaping","text":"","code":"fix_escaping(   text,   special_chars = c(\"(\", \")\", \".\", \"{\", \"}\", \"[\", \"]\"),   num_escapes = 2,   use.names = F )"},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fix_escaping ensure correct escaping of special characters in a string — fix_escaping","text":"text character string process. special_chars character vector special characters need escaping. Defaults \".\", \"(\",   \"{\",\"}\",  \"[\", \"]\", \")\" num_escapes Integer. Required number \\ special character. use.names Boolean named list preserved name returned. Default FALSE.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fix_escaping ensure correct escaping of special characters in a string — fix_escaping","text":"corrected string right number escape characters.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/fix_escaping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fix_escaping ensure correct escaping of special characters in a string — fix_escaping","text":"","code":"rgx <- fix_escaping(\"This (is) (a) test.\", special_chars = c(\"(\", \")\", \"?\"), num_escapes = 4) # Returns: \"This \\\\(is\\\\) \\\\(a\\\\) test.\""},{"path":"https://clement-lvd.github.io/codexplor/reference/function_def_regex_by_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve function definition regex patterns by programming language — function_def_regex_by_language","title":"Retrieve function definition regex patterns by programming language — function_def_regex_by_language","text":"function returns df regex patterns file extensions associated function definitions one specified programming languages.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/function_def_regex_by_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve function definition regex patterns by programming language — function_def_regex_by_language","text":"","code":"function_def_regex_by_language(...)"},{"path":"https://clement-lvd.github.io/codexplor/reference/function_def_regex_by_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve function definition regex patterns by programming language — function_def_regex_by_language","text":"... One programming language names (character strings).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/function_def_regex_by_language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve function definition regex patterns by programming language — function_def_regex_by_language","text":"dataframe row corresponds language contains: language: name (e.g., 'R') fn_regex: regex pattern used detect function definitions language. file_ext: typical file extension language. local_file_ext: typical file extension language + $ (regex end line).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/function_def_regex_by_language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve function definition regex patterns by programming language — function_def_regex_by_language","text":"function supports multiple programming languages single call. Language names case-insensitive.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/function_def_regex_by_language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve function definition regex patterns by programming language — function_def_regex_by_language","text":"","code":"fn_def <-function_def_regex_by_language(\"Python\", \"R\") fn_def <- function_def_regex_by_language(\"Go\", \"C\", \"JavaScript\")"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"function retrieves full URLs files GitHub repository match specified pattern.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"","code":"get_github_raw_filespath(   repo = \"tidyverse/stringr\",   branch = \"main\",   pattern = \"\\\\.R\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"repo (character) GitHub repository format \"owner/repo\". Default \"tidyverse/stringr\". Return list user passed list named char (names repo list passed) branch (character) branch scan files. Default \"main\". pattern (character) regex pattern filter files (default \"\\\\.R\", meaning R scripts). Return list named char user passed list patterns (NA returned pattern associated github files)","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"character vector URLs matching files (https://raw.githubusercontent.com/).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_github_raw_filespath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GitHub File URLs Matching a Pattern — get_github_raw_filespath","text":"","code":"if (FALSE) { # \\dontrun{ readr_fp <- get_github_raw_filespath(repo = \"tidyverse/stringr\", pattern = \"\\\\.R\") } # }"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an edge list into an igraph network — get_igraph_from_df","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"function takes data frame representing edge list converts igraph object. allows filtering nodes based centrality (filter orphan default). construct directed network","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"","code":"get_igraph_from_df(   edgelist,   directed = T,   filter_min_centrality = 0,   clean_egolink = T,   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"edgelist data.frame data frame containing least two columns representing edges (source target nodes). directed logical, default = TRUE Indicates whether graph directed (TRUE) undirected (FALSE). filter_min_centrality numeric, default = 0 (filter orphans) Strict minimum total degree (sum -degree -degree) required keep node. indicate -1 keep orphans (.e. degree = '0') clean_egolink logical, default = TRUE TRUE, self-loops (edges == ) removed edge list processing. ... Additional arguments passed igraph::graph_from_dataframe node selection (e.g., ignore.case = TRUE).","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"igraph object representing processed graph.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"Step 1: Cleans edge list (removes self-loops clean_egolink = TRUE). Step 2: Constructs igraph object. Step 3: Filters nodes total degree filter_min_centrality. Step 4 (optional): Extracts subgraph based made_subgraph_from_a_regex ego-level constraints.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_igraph_from_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an edge list into an igraph network — get_igraph_from_df","text":"","code":"# Example edge list edgelist <- data.frame(from = c(\"A\", \"B\", \"C\", \"D\", \"E\"),                        to   = c(\"B\", \"C\", \"A\", \"A\", \"A\"))  # Create a directed igraph object with minimal filtering g <- get_igraph_from_df(edgelist, directed = TRUE)  # Create an undirected graph with a degree filter g <- get_igraph_from_df(edgelist, directed = FALSE, filter_min_centrality = 2)"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"function transforms igraph graph object networkD3 interactive visualization. allows customization titles, node colors, missing link colors, additional HTML code insertion.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"","code":"get_networkd3_from_igraph(   graph_igraph,   title_h1 = \"networkD3\",   subtitle_h2 = NULL,   endnotes_h3 = NULL,   colors_for_nodes = c(\"green\", \"grey\", \"black\", \"red\"),   color_outdeg_instead_of_indeg = F,   color_for_na_link = colors_for_nodes[[1]],   add_html_div_code_before_graph = NULL,   ...,   charge = -200 )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"graph_igraph igraph object representing network. title_h1 Character. main title (HTML <h1>) displayed graph. Default \"networkD3\". subtitle_h2 Character (optional). subtitle (HTML <h2>) displayed main title. Default NULL (subtitle). endnotes_h3 Character (optional). description note (HTML <h3>) displayed network. Default NULL (text). colors_for_nodes Character vector. Specifies colors nodes based degree also number separation func' try realize (based indegrees outdegrees). Default c(\"green\", \"grey\", \"black\", \"red\"). color_outdeg_instead_of_indeg Logical. TRUE, node colors assigned based -degree instead -degree. Default FALSE. color_for_na_link Character. Color assigned links data missing. Default 1st color colors_for_node (\"green\"). add_html_div_code_before_graph Character (optional). Custom HTML code inserted end network. Default NULL (additional HTML). ... optional parameter passed networkD3::forceNetwork charge integer, default = -200 Numeric value indicating either strength node repulsion (negative value) attraction (positive value). Passed networkD3::forceNetwork.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"list net3d usual object networkD3:: html object networkD3::forceNetwork : net3d networkD3 usual list $links $links 1st entry networkD3 usual list 'source' 'target' vectors $nodes $nodes 2nd entry networkD3 usual list, 'name' nodes vector forcenetwork networkD3::forceNetwork usual html object interactive network visualization","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_networkd3_from_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an igraph object to a networkD3 visualization — get_networkd3_from_igraph","text":"","code":"library(igraph) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union g <- make_ring(10) get_networkd3_from_igraph(g, title_h1 = \"My Network\") #> $net3d #> $net3d$links #>    source target color_deg #> 1       0      1   #FF0000 #> 2       1      2   #FF0000 #> 3       2      3   #FF0000 #> 4       3      4   #FF0000 #> 5       4      5   #FF0000 #> 6       5      6   #FF0000 #> 7       6      7   #FF0000 #> 8       7      8   #FF0000 #> 9       0      9   #FF0000 #> 10      8      9   #FF0000 #>  #> $net3d$nodes #>    name indegree outdegree color_deg #> 1     1        2         2   #FF0000 #> 2     2        2         2   #FF0000 #> 3     3        2         2   #FF0000 #> 4     4        2         2   #FF0000 #> 5     5        2         2   #FF0000 #> 6     6        2         2   #FF0000 #> 7     7        2         2   #FF0000 #> 8     8        2         2   #FF0000 #> 9     9        2         2   #FF0000 #> 10   10        2         2   #FF0000 #>  #>  #> $forcenetwork #>"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Regular Expression from a Character Vector — get_regex_from_vector","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"function takes vector strings returns concatenated regular expression pattern. allows adding prefix /suffix element escaping special characters.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"","code":"get_regex_from_vector(   vector,   prefix_for_regex = \"\",   suffix_for_regex = \"\",   fix_escaping = TRUE,   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"vector character vector containing elements convert regular expression. prefix_for_regex string prepend element vector regex pattern. suffix_for_regex string append element vector regex pattern. fix_escaping boolean, indicating escaping fixed. Default TRUE ... Passed fix_escaping","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"single character string containing regular expression pattern created concatenating elements input vector, specified prefix suffix applied, special characters escaped.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"list special_chars_to_escape, number escaping char. add (default num_escapes = 2), escaping char. consider, etc.","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/get_regex_from_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Regular Expression from a Character Vector — get_regex_from_vector","text":"","code":"# Example 1: Create a regex pattern for a vector of words words <- c(\"apple\", \"banana\", \"cherry\") rgx <- get_regex_from_vector(words, \"^\", \"$\")  # Example 2: Create a regex pattern for words with escaped parentheses words <- c(\"foo(bar)\", \"baz(qux)\") rgx <- get_regex_from_vector(words, \"(\", \")?\", c(\"(\", \")\"), fix_escaping = TRUE) #here we don't escape our custom pattern \"(\" and \")?\" even if escaping of other will be fixed"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_text_network_from_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Text Network from folder path(s) and/or github repos — get_text_network_from_project","title":"Get Text Network from folder path(s) and/or github repos — get_text_network_from_project","text":"function read files specified folder (default .R files) extracting filtering text based set criteria.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_text_network_from_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Text Network from folder path(s) and/or github repos — get_text_network_from_project","text":"","code":"get_text_network_from_project(   folder_path = NULL,   repos = NULL,   first_match_to_exclude = NULL,   prefix_for_regex_from_the_text = \"\\\\b\",   suffix_for_regex_from_the_text = \"\\\\(\",   filter_2nd_match_unmatched_lines = TRUE,   filter_first_match_results = TRUE,   filter_egolink_within_a_file = TRUE,   ...,   file_path_from_colname = \"from\",   file_path_to_colname = \"to\",   match1_colname = \"first_match\",   match2_colname = \"second_match\",   line_number_match2_colname = \"line_number\",   content_match1_col_name = \"content_match_1\",   content_match2_col_name = \"content_match_2\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/get_text_network_from_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Text Network from folder path(s) and/or github repos — get_text_network_from_project","text":"folder_path character string list representing path(s) /url local folders path read. repos character string list representing name(s) github repos (e.g., 'tidyverse/stringr'). first_match_to_exclude character vector strings exclude specific results original matches. example, can exclude results like \"server\". prefix_for_regex_from_the_text character string representing prefix add 1st match turned new regular expressions. default empty string. suffix_for_regex_from_the_text character string representing regex add suffix match, order complete regular expression. default empty string. filter_2nd_match_unmatched_lines logical Default = TRUE logical value indicating whether keep lines match second pattern set TRUE, keep lines set FALSE. filter_first_match_results logical, default = TRUE logical value indicating whether apply filter first match. default TRUE. filter_egolink_within_a_file logical Default = TRUE. logical value indicating whether filter results based \"ego links\" (document referring ) ... Parameters passed construct_corpus() srch_pattern_in_files_get_df(). parameters characters values, e.g., adjusting \"pattern\" parameter matched logical values, e.g., \"keep_comments = T\" integer values ignore_match_less_than_nchar, etc. file_path_from_colname character Default = '' column name (string) representing \"\" file path result data frame. file_path_to_colname character Default = '' column name (string) representing \"\" file path result data frame. match1_colname character Default = 'first_match' column name (string) first match result data frame. match2_colname character Default = 'second_match' column name (string) second match result data frame. line_number_match2_colname character Default = 'line_number'  column name (string) line number second match result data frame. content_match1_col_name character Default = 'content_match_1' column name (string) full content first match. content_match2_col_name character Default = 'content_match_2'  column name (string) full content second match.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_text_network_from_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Text Network from folder path(s) and/or github repos — get_text_network_from_project","text":"data frame wich edgelist citations network columns '' '' indicates files paths urls matched contents.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/get_text_network_from_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Text Network from folder path(s) and/or github repos — get_text_network_from_project","text":"designed generate network text cascading text research : 1st func' try match pattern within files, optionnaly filter initial results. , regex-pattern constructed appending 1st match 2nd research extract pattern, construct network (document 2nd match => document 1st match)","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/get_text_network_from_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Text Network from folder path(s) and/or github repos — get_text_network_from_project","text":"","code":"# Example with url from github result <- get_text_network_from_project( folder_path =  \"~\" ) #>    |                                                                               |                                                                      |   0%   |                                                                               |=                                                                     |   1%   |                                                                               |=                                                                     |   2%   |                                                                               |==                                                                    |   2%   |                                                                               |==                                                                    |   3%   |                                                                               |===                                                                   |   4%   |                                                                               |===                                                                   |   5%   |                                                                               |====                                                                  |   5%   |                                                                               |====                                                                  |   6%   |                                                                               |=====                                                                 |   7%   |                                                                               |=====                                                                 |   8%   |                                                                               |======                                                                |   8%   |                                                                               |======                                                                |   9%   |                                                                               |=======                                                               |  10%   |                                                                               |=======                                                               |  11%   |                                                                               |========                                                              |  11%   |                                                                               |========                                                              |  12%   |                                                                               |=========                                                             |  13%   |                                                                               |==========                                                            |  14%   |                                                                               |==========                                                            |  15%   |                                                                               |===========                                                           |  15%   |                                                                               |===========                                                           |  16%   |                                                                               |============                                                          |  17%   |                                                                               |=============                                                         |  18%   |                                                                               |=============                                                         |  19%   |                                                                               |==============                                                        |  19%   |                                                                               |==============                                                        |  20%   |                                                                               |===============                                                       |  21%   |                                                                               |===============                                                       |  22%   |                                                                               |================                                                      |  22%   |                                                                               |================                                                      |  23%   |                                                                               |=================                                                     |  24%   |                                                                               |=================                                                     |  25%   |                                                                               |==================                                                    |  25%   |                                                                               |==================                                                    |  26%   |                                                                               |===================                                                   |  27%   |                                                                               |===================                                                   |  28%   |                                                                               |====================                                                  |  28%   |                                                                               |====================                                                  |  29%   |                                                                               |=====================                                                 |  30%   |                                                                               |=====================                                                 |  31%   |                                                                               |======================                                                |  31%   |                                                                               |======================                                                |  32%   |                                                                               |=======================                                               |  33%   |                                                                               |========================                                              |  34%   |                                                                               |========================                                              |  35%   |                                                                               |=========================                                             |  35%   |                                                                               |=========================                                             |  36%   |                                                                               |==========================                                            |  37%   |                                                                               |===========================                                           |  38%   |                                                                               |===========================                                           |  39%   |                                                                               |============================                                          |  39%   |                                                                               |============================                                          |  40%   |                                                                               |=============================                                         |  41%   |                                                                               |=============================                                         |  42%   |                                                                               |==============================                                        |  42%   |                                                                               |==============================                                        |  43%   |                                                                               |===============================                                       |  44%   |                                                                               |===============================                                       |  45%   |                                                                               |================================                                      |  45%   |                                                                               |================================                                      |  46%   |                                                                               |=================================                                     |  47%   |                                                                               |=================================                                     |  48%   |                                                                               |==================================                                    |  48%   |                                                                               |==================================                                    |  49%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================                                  |  51%   |                                                                               |====================================                                  |  52%   |                                                                               |=====================================                                 |  52%   |                                                                               |=====================================                                 |  53%   |                                                                               |======================================                                |  54%   |                                                                               |======================================                                |  55%   |                                                                               |=======================================                               |  55%   |                                                                               |=======================================                               |  56%   |                                                                               |========================================                              |  57%   |                                                                               |========================================                              |  58%   |                                                                               |=========================================                             |  58%   |                                                                               |=========================================                             |  59%   |                                                                               |==========================================                            |  60%   |                                                                               |==========================================                            |  61%   |                                                                               |===========================================                           |  61%   |                                                                               |===========================================                           |  62%   |                                                                               |============================================                          |  63%   |                                                                               |=============================================                         |  64%   |                                                                               |=============================================                         |  65%   |                                                                               |==============================================                        |  65%   |                                                                               |==============================================                        |  66%   |                                                                               |===============================================                       |  67%   |                                                                               |================================================                      |  68%   |                                                                               |================================================                      |  69%   |                                                                               |=================================================                     |  69%   |                                                                               |=================================================                     |  70%   |                                                                               |==================================================                    |  71%   |                                                                               |==================================================                    |  72%   |                                                                               |===================================================                   |  72%   |                                                                               |===================================================                   |  73%   |                                                                               |====================================================                  |  74%   |                                                                               |====================================================                  |  75%   |                                                                               |=====================================================                 |  75%   |                                                                               |=====================================================                 |  76%   |                                                                               |======================================================                |  77%   |                                                                               |======================================================                |  78%   |                                                                               |=======================================================               |  78%   |                                                                               |=======================================================               |  79%   |                                                                               |========================================================              |  80%   |                                                                               |========================================================              |  81%   |                                                                               |=========================================================             |  81%   |                                                                               |=========================================================             |  82%   |                                                                               |==========================================================            |  83%   |                                                                               |===========================================================           |  84%   |                                                                               |===========================================================           |  85%   |                                                                               |============================================================          |  85%   |                                                                               |============================================================          |  86%   |                                                                               |=============================================================         |  87% #> Error in sub(re, \"\", x, perl = TRUE): input string 8 is invalid UTF-8  # Will return a network of functions # (from the file where a function is call => to the file were defined)"},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Read text file with readLines and answer a df — readlines_in_df","title":"Read text file with readLines and answer a df — readlines_in_df","text":"function reads content text file line line stores data frame. must pick FIRST col' file_path readed, LAST col content readed intermediar additionnal info, .e. line_number","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read text file with readLines and answer a df — readlines_in_df","text":"","code":"readlines_in_df(   files_path,   return_lowered_text = FALSE,   keep_comments = FALSE,   .verbose = TRUE,   file_path_col_name = \"file_path\",   content_col_name = \"content\",   line_number_col_name = \"line_number\",   char_comment = \"#\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read text file with readLines and answer a df — readlines_in_df","text":"files_path character Path(s) url(s) text files read. return_lowered_text logical, default = FALSE TRUE lowercasing returned text. FALSE (default) preserve readed text keep_comments logical, default = FALSE FALSE - default, lines starting # treated keep_comments ignored. .verbose logical, default = TRUE TRUE, shows progress bar reading file. file_path_col_name character, default = \"file_path\" Column name file path output dataframe. content_col_name character, default = \"content\" Column name file content output dataframe. line_number_col_name character, default = \"line_number\" Column name line numbers output dataframe. char_comment character, default = \"^#\" Regex considering line comment (default '#' begining line files)","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read text file with readLines and answer a df — readlines_in_df","text":"RETURN : data.frame 3 col'. First col' (file_path default) file_path (readed), line_number (default). last column (content default) contain readed lines file. file_path Path file match found. line_number Line number file. content Full content matched line. matches Extracted function name matched pattern.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/readlines_in_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read text file with readLines and answer a df — readlines_in_df","text":"","code":"if (FALSE) { # \\dontrun{   df <- readlines_in_df(\"path/to/file.R\", case.sensitive = TRUE)   contents_readed <- df[[ncol(df)]]   file_path_readed <-  df[[1]] } # }"},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_files_get_df.html","id":null,"dir":"Reference","previous_headings":"","what":"srch_pattern_in_files_get_df associate a text to a file e.g., detect a file with a func' defined with 'function_name <- function' — srch_pattern_in_files_get_df","title":"srch_pattern_in_files_get_df associate a text to a file e.g., detect a file with a func' defined with 'function_name <- function' — srch_pattern_in_files_get_df","text":"| ] Read bunch files answer content readed df | B] try extract pattern return extracted text  (match commented lines default) 'matched text' part result, NA meaning 'match' | C] Finally answer df readed content Regarding returned df : first col' file path matched files (first regex passed list.files) Last col extracted text : prefix passed user, complete match","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_files_get_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"srch_pattern_in_files_get_df associate a text to a file e.g., detect a file with a func' defined with 'function_name <- function' — srch_pattern_in_files_get_df","text":"","code":"srch_pattern_in_files_get_df(   files_path = NULL,   pattern = \"(^| \\\\.|\\\\b)([\\\\.A-Za-z0-9_]+)(?=\\\\s*(?:<-)\\\\s*function)\",   match_to_exclude = NULL,   ignore_match_less_than_nchar = 3,   file_path_col_name = \"file_path\",   content_col_name = \"content\",   line_number_col_name = \"line_number\",   extracted_txt_col_name = \"matches\",   ... )"},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_files_get_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"srch_pattern_in_files_get_df associate a text to a file e.g., detect a file with a func' defined with 'function_name <- function' — srch_pattern_in_files_get_df","text":"files_path character vector files path path /url. pattern character, default = \"\\\\b([-Za-z0-9_]+)(?=\\\\s*(?:<-|=)\\\\s*(?:function|$))\" regex matching lines extract text. Use regex finding line extracting text match_to_exclude character vector values returned match. rows values match element vector removed. ignore_match_less_than_nchar double, default = 2 Excluding match depending char. number matched text (strictly inferior) Default exclude match 1 char 'x'. file_path_col_name character, default = \"file_path\" Column name file path output dataframe (first col' returned df) content_col_name character, default = \"content\" Column name file content output dataframe. line_number_col_name character, default = \"line_number\" Column name line numbers output dataframe. extracted_txt_col_name character, default = \"matches\" Column name extracted text (last col' returned df) ... Additional arguments passed readlines_in_df example, keep_comments (logical, default = FALSE) taking account commented lines files","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_files_get_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"srch_pattern_in_files_get_df associate a text to a file e.g., detect a file with a func' defined with 'function_name <- function' — srch_pattern_in_files_get_df","text":"data.frame 4 col' : first (file_path default) contain file_path, line_number (default) contain line_number, third column (content default) containing readed lines file LAST ONE contain matched text, according regex provided user","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/codexplor/reference/srch_pattern_in_files_get_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"srch_pattern_in_files_get_df associate a text to a file e.g., detect a file with a func' defined with 'function_name <- function' — srch_pattern_in_files_get_df","text":"","code":"#Analysing the func of the package, assuming you have installed it : pkg_path <- list.files(\"~\", pattern = \".R$\",  recursive = TRUE , full.names = TRUE  ) lines_readed <- srch_pattern_in_files_get_df(pkg_path, .verbose = FALSE) #> Error in sub(re, \"\", x, perl = TRUE): input string 8 is invalid UTF-8 # Return : a dataframe of links, according to - default - pattern"},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"function applies stringr::str_extract_all() string, extracts regex matches, returns unested dataframe customizable column names. Option offered : filtering unmatched result (default)","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"","code":"str_extract_all_to_tidy_df(   string,   pattern,   filter_unmatched = T,   matches_colname = \"matches\",   row_number_colname = \"row_number\" )"},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"string character vector containing input text. pattern regex pattern extract matches. filter_unmatched Logical (default TRUE); TRUE, removes unmatched values output. matches_colname string specifying column name extracted matches (default: \"matches\"). row_number_colname string specifying column name row numbers (default: \"row_number\").","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"dataframe extracted matches corresponding row numbers.","code":""},{"path":"https://clement-lvd.github.io/codexplor/reference/str_extract_all_to_tidy_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract regex matches from a string and return a tidy dataframe — str_extract_all_to_tidy_df","text":"","code":"text_data <- c(\"Here is funcA and funcB\", \"Nothing here\", \"funcC is present\") pattern <- \"func[A-C]\" result_df <- str_extract_all_to_tidy_df(text_data, pattern) print(result_df) #>   matches row_number #> 1   funcA          1 #> 2   funcB          1 #> 3   funcC          3"}]
