fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 2)
fix_escaping("This \\(is) a test?", special_chars = c("(", ")", "?"), num_escapes = 4)
fix_escaping("This \\\\(is) a test?", special_chars = c("(", ")", "?"), num_escapes = 4)
fix_escaping("This \\\\(is\\) (a\\\\\\) test?", special_chars = c("(", ")", "?"), num_escapes = 4)
test_that("fix_escaping correctly adds escapes", {
expect_equal(fix_escaping("Hello (world)", special_chars = c("(", ")"), num_escapes = 2),
"Hello \\(world\\)")
})
test_that("fix_escaping handles multiple special characters", {
expect_equal(fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 1),
"This \\(is\\) a test\\?")
})
test_that("fix_escaping maintains already correct escaping", {
expect_equal(fix_escaping("Here is \\(escaped\\)", special_chars = c("(", ")"), num_escapes = 1),
"Here is \\(escaped\\)")
})
test_that("fix_escaping works with 3 levels of escaping", {
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("("), num_escapes = 3),
"Match this \\\\\\(text\\\\\\)")
})
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("("), num_escapes = 6),
"Match this \\\\\\(text\\\\\\)")
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("("), num_escapes = 5),
"Match this \\\\\\(text\\\\\\)")
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("("), num_escapes = 4),
"Match this \\\\\\(text\\\\\\)")
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("("), num_escapes = 3),
"Match this \\\\\\(text\\\\\\)")
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("("), num_escapes = 4),
"Match this \\\\\\(text\\\\\\)")
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("("), num_escapes = 6),
"Match this \\\\\\(text\\\\\\)")
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("(", ")"), num_escapes = 6),
"Match this \\\\\\(text\\\\\\)")
expect_equal(fix_escaping("Just text", special_chars = c("(", ")"), num_escapes = 2),
"Just text")
test_that("fix_escaping throws errors on invalid input", {
expect_error(fix_escaping(42, special_chars = c("("), num_escapes = 2))
expect_error(fix_escaping("Test", special_chars = character(0), num_escapes = 2))
expect_error(fix_escaping("Test", special_chars = c("("), num_escapes = -1))
})
#'
#' This function adds the designated number of escape characters (`\`) before special characters.
#'
#' @param text A character string to process.
#' @param special_chars A character vector of special characters that need escaping.
#' @param num_escapes An integer specifying the required number of `\` before each special character.
#' @return A corrected string with the right number of escape characters.
#' @examples
#' fix_escaping("This \\\\(is\\) (a\\\\\\) test?", special_chars = c("(", ")", "?"), num_escapes = 4)
#' # Returns: "This \\\\(is\\\\) \\\\(a\\\\) test\\\\?"
fix_escaping <- function(text, special_chars, num_escapes = 2) {
if (!is.character(text) || length(text) != 1) stop("text must be a single character string.")
if (!is.character(special_chars) || length(special_chars) == 0) stop("special_chars must be a non-empty character vector.")
if (!is.numeric(num_escapes) || num_escapes < 0) stop("num_escapes must be a non-negative integer.")
# Construire les expressions régulières pour chaque caractère spécial
patterns <- paste0("\\\\*", "\\", special_chars)  # Match existant + char spécial
replacements <- paste0(strrep("\\", num_escapes), special_chars)  # Correct escaping
# Appliquer la transformation sans boucle explicite
fixed_text <- Reduce(function(txt, i) gsub(patterns[i], replacements[i], txt, perl = TRUE),
seq_along(special_chars), init = text)
return(fixed_text)
}
fix_escaping("This \\\\(is\\) (a\\\\\\) test?", special_chars = c("(", ")", "?"), num_escapes = 4)
test_that("fix_escaping correctly adds escapes", {
expect_equal(fix_escaping("Hello (world)", special_chars = c("(", ")"), num_escapes = 2),
"Hello \\(world\\)")
})
test_that("fix_escaping handles multiple special characters", {
expect_equal(fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 1),
"This \\(is\\) a test\\?")
})
expect_equal(fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 1),
expect_equal(fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 1)
expect_equal(fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 1),
"This \\(is\\) a test\\?")
expect_equal(fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 2),
"This \\(is\\) a test\\?")
fix_escaping("This (is) a test?", special_chars = c("(", ")", "?"), num_escapes = 2)
fix_escaping("Here is \\(escaped\\)", special_chars = c("(", ")"), num_escapes = 1)
fix_escaping("Here is \\(escaped\\)", special_chars = c("(", ")"), num_escapes = 2)
test_that("fix_escaping works with 3 levels of escaping", {
expect_equal(fix_escaping("Match this \\(text\\)", special_chars = c("(", ")"), num_escapes = 6),
"Match this \\\\\\(text\\\\\\)")
})
test_that("fix_escaping returns input unchanged if no special characters", {
expect_equal(fix_escaping("Just text", special_chars = c("(", ")"), num_escapes = 2),
"Just text")
})
test_that("fix_escaping throws errors on invalid input", {
expect_error(fix_escaping(42, special_chars = c("("), num_escapes = 2))
expect_error(fix_escaping("Test", special_chars = character(0), num_escapes = 2))
expect_error(fix_escaping("Test", special_chars = c("("), num_escapes = -1))
})
# clean undesired char that will bug stringi.r
# regexx <-  escape_unescaped_chars(fn_defined)
fix_escaping(fn_defined)
# clean undesired char that will bug stringi.r
regexx <-  escape_unescaped_chars(fn_defined)
paste0(prefix_for_regex_from_the_text, regexx, suffix_for_regex_from_the_text)
#### 3) Construct a regex ####
# optionnally add a suffix (such as a filter from the user, capture-group, etc.)
regexx <- paste0(prefix_for_regex_from_the_text, regexx, suffix_for_regex_from_the_text)
# made a single regex and clean it from unescaped chars
regexx_complete <- paste0(regexx, collapse = "|")
fix_escaping(regexx_complete)
fix_escaping(regexx_complete, special_chars = c("(", ")"))
regexx_complete <- fix_escaping(regexx_complete,num_escapes = 2, special_chars = c("(", ")"))
#### 4) EXTRACT #2 ####
#  match every mention of our previous matches and returning a DF
fns_called_df <- str_extract_all_to_tidy_df(string = fn_network$content
, pattern = regexx_complete
, row_number_colname = "row_number", matches_colname = "second_match"
, filter_unmatched = filter_2nd_match_unmatched_lines)
fn_network$row_number <- seq_len(nrow(fn_network))
#### 5) take care of the network of func' ####
# reunite matches 1 and matches 2 =>
complete_network <- merge(fns_called_df, fn_network,
all.x = T # we preserve each 2nd match
, by = "row_number")
# filter the network
# not empty first_match (func_defined) value indicate that this file mention his own match
# ('internal link', recursivity or func' definition) whereas other link refer to external link
if(filter_first_match_results){complete_network <- complete_network[ which(is.na(complete_network["first_match"])) , ] }
get_text_network_from_files <- function(folder_path = getwd()
, filter_first_match_by_nchar = 3
, filter_original_result_not_in = "" #c("server")
,  suffix_for_regex_from_the_text = "(\\\\W|$)" # pas une lettre ou un chiffre !
, prefix_for_regex_from_the_text = ""
, regex_to_exclude_files_path = NULL #"test-"
, filter_2nd_match_unmatched_lines = T
, filter_first_match_results = T
, filter_ego_link = T
, file_path_from = 'from'
, file_path_to = 'to'
, match1_colname =  "first_match"
,  match2_colname ="second_match"
, line_number_match2_colname = "line_number"
, content_match2_col_name = "content" # we want to keep the full content very available
){
# we will rename in the end so var' names are hardcoded hereafter :
####1) Get content from R files ####
# With the default regex of srch_pattern_in_files_get_df, fn_network indicate where the func' are defined
fn_network <-  srch_pattern_in_files_get_df(path_main_folder = folder_path
, file_path_col_name = "file_path"
, content_col_name = "content"
, extracted_prefix_col_name = "first_match") #file with a func' defined by default
#we will retrieve this object and these var later
# we have 3 informations that we used hereafter :
# full content + path + a first match (default try to match each func' definition)
#### 2) List the result ####
fn_defined <- unique(fn_network$first_match) # it's the func' defined by default
#by default we have the files where each func is defined
# filter if user don't want some result + filter with nchar
fn_defined <- fn_defined[!fn_defined %in% filter_original_result_not_in]
# filter the previous matches according to nchar parameter
fn_defined <- fn_defined[which(nchar(fn_defined) > filter_first_match_by_nchar)]
fn_defined <- fn_defined[which(!is.na(fn_defined))]
# clean undesired char that will bug stringi.r
regexx <-  escape_unescaped_chars(fn_defined)
#### 3) Construct a regex ####
# optionnally add a suffix (such as a filter from the user, capture-group, etc.)
regexx <- paste0(prefix_for_regex_from_the_text, regexx, suffix_for_regex_from_the_text)
# made a single regex and clean it from unescaped chars
regexx_complete <- paste0(regexx, collapse = "|")
regexx_complete <- fix_escaping(regexx_complete,num_escapes = 2, special_chars = c("(", ")"))
#### 4) EXTRACT #2 ####
#  match every mention of our previous matches and returning a DF
fns_called_df <- str_extract_all_to_tidy_df(string = fn_network$content
, pattern = regexx_complete
, row_number_colname = "row_number", matches_colname = "second_match"
, filter_unmatched = filter_2nd_match_unmatched_lines)
fn_network$row_number <- seq_len(nrow(fn_network))
# we have add row_number colname in both !
#### 5) take care of the network of func' ####
# reunite matches 1 and matches 2 =>
complete_network <- merge(fns_called_df, fn_network,
all.x = T # we preserve each 2nd match
, by = "row_number")
# lines will be duplicated if + than 1 match per line
# filter the network
# not empty first_match (func_defined) value indicate that this file mention his own match
# ('internal link', recursivity or func' definition) whereas other link refer to external link
if(filter_first_match_results){complete_network <- complete_network[ which(is.na(complete_network["first_match"])) , ] }
#in the begining we have made fn_network of file_path where we've match func' definition - by default
origines_files <- unique(fn_network[which(!is.na(fn_network$first_match)), c("first_match","file_path", "content")])
colnames( origines_files ) <- c("function", "defined_in", "definition_content") # renaming for hereafter
# take original files - begining of the code - for adding the path where a func' is defined
returned_network <- merge(complete_network, origines_files
, by.x = "second_match"
, by.y = "function" # it was also 'first_match' so we've renamed
, all.x = TRUE)
returned_network <- returned_network[, c("file_path", "defined_in", "first_match", "second_match", "line_number", "content",  "definition_content")]
if(filter_ego_link){returned_network <- returned_network[ which( returned_network["file_path"] != returned_network["defined_in"]) , ] }
# filter if user want to filter
if(!is.null(regex_to_exclude_files_path)){
returned_network <-  returned_network[-grep(x = returned_network$file_path, pattern =  regex_to_exclude_files_path) , ]
}
colnames(returned_network) <- c(file_path_from, file_path_to, match1_colname, match2_colname, line_number_match2_colname, content_match2_col_name,  content_match2_col_name)
# finally givin the colname wanted by the user
return(returned_network)
}
test <- get_text_network_from_files("~")
regexx_complete
fns_called_df
get_text_network_from_files <- function(folder_path = getwd()
, filter_first_match_by_nchar = 3
, filter_original_result_not_in = "" #c("server")
,  suffix_for_regex_from_the_text = "(\\\\W|$)" # pas une lettre ou un chiffre !
, prefix_for_regex_from_the_text = ""
, regex_to_exclude_files_path = NULL #"test-"
, filter_2nd_match_unmatched_lines = T
, filter_first_match_results = T
, filter_ego_link = T
, file_path_from = 'from'
, file_path_to = 'to'
, match1_colname =  "first_match"
,  match2_colname ="second_match"
, line_number_match2_colname = "line_number"
, content_match2_col_name = "content" # we want to keep the full content very available
){
# we will rename in the end so var' names are hardcoded hereafter :
####1) Get content from R files ####
# With the default regex of srch_pattern_in_files_get_df, fn_network indicate where the func' are defined
fn_network <-  srch_pattern_in_files_get_df(path_main_folder = folder_path
, file_path_col_name = "file_path"
, content_col_name = "content"
, extracted_prefix_col_name = "first_match") #file with a func' defined by default
#we will retrieve this object and these var later
# we have 3 informations that we used hereafter :
# full content + path + a first match (default try to match each func' definition)
#### 2) List the result ####
fn_defined <- unique(fn_network$first_match) # it's the func' defined by default
#by default we have the files where each func is defined
# filter if user don't want some result + filter with nchar
fn_defined <- fn_defined[!fn_defined %in% filter_original_result_not_in]
# filter the previous matches according to nchar parameter
fn_defined <- fn_defined[which(nchar(fn_defined) > filter_first_match_by_nchar)]
fn_defined <- fn_defined[which(!is.na(fn_defined))]
# clean undesired char that will bug stringi.r
# regexx <-  escape_unescaped_chars(fn_defined)
#### 3) Construct a regex ####
# optionnally add a suffix (such as a filter from the user, capture-group, etc.)
regexx <- paste0(prefix_for_regex_from_the_text, regexx, suffix_for_regex_from_the_text)
# made a single regex and clean it from unescaped chars
regexx_complete <- paste0(regexx, collapse = "|")
regexx_complete <- fix_escaping(regexx_complete,num_escapes = 2, special_chars = c("(", ")"))
#### 4) EXTRACT #2 ####
#  match every mention of our previous matches and returning a DF
fns_called_df <- str_extract_all_to_tidy_df(string = fn_network$content
, pattern = regexx_complete
, row_number_colname = "row_number", matches_colname = "second_match"
, filter_unmatched = filter_2nd_match_unmatched_lines)
fn_network$row_number <- seq_len(nrow(fn_network))
# we have add row_number colname in both !
#### 5) take care of the network of func' ####
# reunite matches 1 and matches 2 =>
complete_network <- merge(fns_called_df, fn_network,
all.x = T # we preserve each 2nd match
, by = "row_number")
# lines will be duplicated if + than 1 match per line
# filter the network
# not empty first_match (func_defined) value indicate that this file mention his own match
# ('internal link', recursivity or func' definition) whereas other link refer to external link
if(filter_first_match_results){complete_network <- complete_network[ which(is.na(complete_network["first_match"])) , ] }
#in the begining we have made fn_network of file_path where we've match func' definition - by default
origines_files <- unique(fn_network[which(!is.na(fn_network$first_match)), c("first_match","file_path", "content")])
colnames( origines_files ) <- c("function", "defined_in", "definition_content") # renaming for hereafter
# take original files - begining of the code - for adding the path where a func' is defined
returned_network <- merge(complete_network, origines_files
, by.x = "second_match"
, by.y = "function" # it was also 'first_match' so we've renamed
, all.x = TRUE)
returned_network <- returned_network[, c("file_path", "defined_in", "first_match", "second_match", "line_number", "content",  "definition_content")]
if(filter_ego_link){returned_network <- returned_network[ which( returned_network["file_path"] != returned_network["defined_in"]) , ] }
# filter if user want to filter
if(!is.null(regex_to_exclude_files_path)){
returned_network <-  returned_network[-grep(x = returned_network$file_path, pattern =  regex_to_exclude_files_path) , ]
}
colnames(returned_network) <- c(file_path_from, file_path_to, match1_colname, match2_colname, line_number_match2_colname, content_match2_col_name,  content_match2_col_name)
# finally givin the colname wanted by the user
return(returned_network)
}
test <- get_text_network_from_files("~")
#### 2) List the result ####
fn_defined <- unique(fn_network$first_match) # it's the func' defined by default
fn_defined <- fn_defined[!fn_defined %in% filter_original_result_not_in]
# filter the previous matches according to nchar parameter
fn_defined <- fn_defined[which(nchar(fn_defined) > filter_first_match_by_nchar)]
fn_defined <- fn_defined[which(!is.na(fn_defined))]
#### 3) Construct a regex ####
# optionnally add a suffix (such as a filter from the user, capture-group, etc.)
regexx <- paste0(prefix_for_regex_from_the_text, regexx, suffix_for_regex_from_the_text)
# made a single regex and clean it from unescaped chars
regexx_complete <- paste0(regexx, collapse = "|")
regexx_complete <- fix_escaping(regexx_complete,num_escapes = 2, special_chars = c("(", ")"))
#### 4) EXTRACT #2 ####
#  match every mention of our previous matches and returning a DF
fns_called_df <- str_extract_all_to_tidy_df(string = fn_network$content
, pattern = regexx_complete
, row_number_colname = "row_number", matches_colname = "second_match"
, filter_unmatched = filter_2nd_match_unmatched_lines)
fn_network$row_number <- seq_len(nrow(fn_network))
#### 5) take care of the network of func' ####
# reunite matches 1 and matches 2 =>
complete_network <- merge(fns_called_df, fn_network,
all.x = T # we preserve each 2nd match
, by = "row_number")
# filter the network
# not empty first_match (func_defined) value indicate that this file mention his own match
# ('internal link', recursivity or func' definition) whereas other link refer to external link
if(filter_first_match_results){complete_network <- complete_network[ which(is.na(complete_network["first_match"])) , ] }
#in the begining we have made fn_network of file_path where we've match func' definition - by default
origines_files <- unique(fn_network[which(!is.na(fn_network$first_match)), c("first_match","file_path", "content")])
colnames( origines_files ) <- c("function", "defined_in", "definition_content") # renaming for hereafter
# take original files - begining of the code - for adding the path where a func' is defined
returned_network <- merge(complete_network, origines_files
, by.x = "second_match"
, by.y = "function" # it was also 'first_match' so we've renamed
, all.x = TRUE)
returned_network <- returned_network[, c("file_path", "defined_in", "first_match", "second_match", "line_number", "content",  "definition_content")]
if(filter_ego_link){returned_network <- returned_network[ which( returned_network["file_path"] != returned_network["defined_in"]) , ] }
returned_network[-grep(x = returned_network$file_path, pattern =  regex_to_exclude_files_path) , ]
colnames(returned_network) <- c(file_path_from, file_path_to, match1_colname, match2_colname, line_number_match2_colname, content_match2_col_name,  content_match2_col_name)
View(returned_network)
#' @param extracted_prefix_col_name `character`, default = `"matches"`
#'   Column name for the extracted text (last col' of the returned df)
#'
#' @return A `data.frame` with 4 col' : first (`file_path` by default) contain the file_path, then `line_number` (by default) contain line_number, third column (`content` by default) containing the readed lines from the file and the LAST ONE contain the matched text, according to the regex provided by the user
#' @examples
#' #Analysing the func of the package, assuming you have installed it :
#' pkg_path <- system.file("R", package = "tidyverse")
#' #lines_readed <- srch_pattern_in_files_get_df(pkg_path)
#' # Return : XXX A FAIRE XXX
#' @export
srch_pattern_in_files_get_df <- function(
path_main_folder = getwd()
, pattern_regex_to_match_and_remove = "<- +?function"
, prefix_to_add_to_pattern = ".*" #(?<!FUN) # useless if "=" is not a valid way to define func'
, recursive_search_for_files = T
,     pattern_regex_list_files  = "\\.r$" #fichiers à lire identifiés avec list.files : not case sensitive
,    ignore_case   = T
, clean_match_from_pattern = T #on clean notre pattern et le suffixe (mais pas le préfixe) des résultats
,  comments = FALSE # on dégage les lignes commentées
, file_path_col_name = "file_path", content_col_name = "content", line_number_col_name = "line_number"
, extracted_prefix_col_name = "matches"
){
####1) import content ####
fls <- list.files(path = path_main_folder, pattern = pattern_regex_list_files, ignore.case = T
, all.files = T, full.names = T, recursive = recursive_search_for_files)
# get files content
content_df <-  readlines_in_df(files_to_read_path = fls,
return_lowered_text = F, comments = comments # skip comment by default
,file_path_col_name = file_path_col_name, content_col_name = content_col_name
, line_number_col_name = line_number_col_name
,    .verbose = T
)
#etract fn names (na if no match at all)
content_df[[extracted_prefix_col_name]] <- extract_txt_before_regex(
txt_vector = content_df[[content_col_name]]
, clean_match_from_pattern = clean_match_from_pattern
,  filter_only_match = F
,ignore_case =  ignore_case
, pattern_regex_to_search = pattern_regex_to_match_and_remove
, prefix_to_add_to_pattern = prefix_to_add_to_pattern )
# we have a df with fn name IN THE LAST COL and the path to the file they are defined IN THE FIRST COL
return(content_df)
}
suffix_for_regex_from_the_text = "(\\\\W|$)" # pas une lettre ou un chiffre !
get_text_network_from_files <- function(folder_path = getwd()
, filter_first_match_by_nchar = 3
, filter_original_result_not_in = "" #c("server")
,  suffix_for_regex_from_the_text = ""# pas une lettre ou un chiffre !
, prefix_for_regex_from_the_text = ""
, regex_to_exclude_files_path = NULL #"test-"
, filter_2nd_match_unmatched_lines = T
, filter_first_match_results = T
, filter_ego_link = T
, file_path_from = 'from'
, file_path_to = 'to'
, match1_colname =  "first_match"
,  match2_colname ="second_match"
, line_number_match2_colname = "line_number"
, content_match2_col_name = "content" # we want to keep the full content very available
){
# we will rename in the end so var' names are hardcoded hereafter :
####1) Get content from R files ####
# With the default regex of srch_pattern_in_files_get_df, fn_network indicate where the func' are defined
fn_network <-  srch_pattern_in_files_get_df(path_main_folder = folder_path
, file_path_col_name = "file_path"
, content_col_name = "content"
, extracted_prefix_col_name = "first_match") #file with a func' defined by default
#we will retrieve this object and these var later
# we have 3 informations that we used hereafter :
# full content + path + a first match (default try to match each func' definition)
#### 2) List the result ####
fn_defined <- unique(fn_network$first_match) # it's the func' defined by default
#by default we have the files where each func is defined
# filter if user don't want some result + filter with nchar
fn_defined <- fn_defined[!fn_defined %in% filter_original_result_not_in]
# filter the previous matches according to nchar parameter
fn_defined <- fn_defined[which(nchar(fn_defined) > filter_first_match_by_nchar)]
fn_defined <- fn_defined[which(!is.na(fn_defined))]
# clean undesired char that will bug stringi.r
# regexx <-  escape_unescaped_chars(fn_defined)
#### 3) Construct a regex ####
# optionnally add a suffix (such as a filter from the user, capture-group, etc.)
regexx <- paste0(prefix_for_regex_from_the_text, regexx, suffix_for_regex_from_the_text)
# made a single regex and clean it from unescaped chars
regexx_complete <- paste0(regexx, collapse = "|")
regexx_complete <- fix_escaping(regexx_complete,num_escapes = 2, special_chars = c("(", ")"))
#### 4) EXTRACT #2 ####
#  match every mention of our previous matches and returning a DF
fns_called_df <- str_extract_all_to_tidy_df(string = fn_network$content
, pattern = regexx_complete
, row_number_colname = "row_number", matches_colname = "second_match"
, filter_unmatched = filter_2nd_match_unmatched_lines)
fn_network$row_number <- seq_len(nrow(fn_network))
# we have add row_number colname in both !
#### 5) take care of the network of func' ####
# reunite matches 1 and matches 2 =>
complete_network <- merge(fns_called_df, fn_network,
all.x = T # we preserve each 2nd match
, by = "row_number")
# lines will be duplicated if + than 1 match per line
# filter the network
# not empty first_match (func_defined) value indicate that this file mention his own match
# ('internal link', recursivity or func' definition) whereas other link refer to external link
if(filter_first_match_results){complete_network <- complete_network[ which(is.na(complete_network["first_match"])) , ] }
#in the begining we have made fn_network of file_path where we've match func' definition - by default
origines_files <- unique(fn_network[which(!is.na(fn_network$first_match)), c("first_match","file_path", "content")])
colnames( origines_files ) <- c("function", "defined_in", "definition_content") # renaming for hereafter
# take original files - begining of the code - for adding the path where a func' is defined
returned_network <- merge(complete_network, origines_files
, by.x = "second_match"
, by.y = "function" # it was also 'first_match' so we've renamed
, all.x = TRUE)
returned_network <- returned_network[, c("file_path", "defined_in", "first_match", "second_match", "line_number", "content",  "definition_content")]
if(filter_ego_link){returned_network <- returned_network[ which( returned_network["file_path"] != returned_network["defined_in"]) , ] }
# filter if user want to filter
if(!is.null(regex_to_exclude_files_path)){
returned_network <-  returned_network[-grep(x = returned_network$file_path, pattern =  regex_to_exclude_files_path) , ]
}
colnames(returned_network) <- c(file_path_from, file_path_to, match1_colname, match2_colname, line_number_match2_colname, content_match2_col_name,  content_match2_col_name)
# finally givin the colname wanted by the user
return(returned_network)
}
test <- get_text_network_from_files("~")
View(test)
View(test)
returned_network
View(returned_network)
#' @param pattern A regex pattern to extract matches.
#' @param filter_unmatched Logical (default `TRUE`); if `TRUE`, removes unmatched values from the output.
#' @param matches_colname A string specifying the column name for extracted matches (default: `"matches"`).
#' @param row_number_colname A string specifying the column name for row numbers (default: `"row_number"`).
#' @return A dataframe with the extracted matches and their corresponding row numbers.
#' @examples
#' text_data <- c("Here is funcA and funcB", "Nothing here", "funcC is present")
#' pattern <- "func[A-C]"
#' result_df <- str_extract_all_to_tidy_df(text_data, pattern)
#' print(result_df)
str_extract_all_to_tidy_df <- function(string, pattern
, filter_unmatched = T
, matches_colname = "matches"
, row_number_colname = "row_number"){
matches <- stringr::str_extract_all(string = string, pattern = pattern)
# Unnest the result without keeping empty result, using unlist
matches_df <-  data.frame(called_name = unlist(matches),
row_number = rep(seq_along(matches), sapply(matches, length)))
# filter :
if(filter_unmatched) {matches_df <- matches_df[!is.na(matches_df$called_name), ]}
# rename :
colnames(matches_df) <- c(matches_colname, row_number_colname)
return(matches_df)
}
test_that("test-str_extract_all_to_tidy_df() returns correct results", {
text_data <- c("funcA funcB", "funcC", "Nothing here", "funcD funcE")
pattern <- "func[A-E]"
test_that("str_extract_all_to_tidy_df extracts matches correctly", {
result <- str_extract_all_to_tidy_df(text_data, pattern)
expected_df <- data.frame(
matches = c("funcA", "funcB", "funcC", "funcD", "funcE"),
row_number = c(1, 1, 2, 4, 4)
)
expect_equal(result, expected_df)
})
test_that("str_extract_all_to_tidy_df handles empty matches correctly", {
text_data <- c("Nothing here", "Still nothing")
result <- str_extract_all_to_tidy_df(text_data, pattern)
expect_equal(nrow(result), 0)  # Should return an empty dataframe
})
test_that("str_extract_all_to_tidy_df removes NA values when filter_unmatched is F", {
text_data <- c("funcA funcB", NA, "funcC")
pattern <- "func[A-C]"
result <- str_extract_all_to_tidy_df(text_data, pattern, filter_unmatched = F)
expected_df <- data.frame(
matches = c("funcA", "funcB", NA, "funcC"),
row_number = c(1, 1, 2, 3)
)
expect_equal(result,expected_df)
})
test_that("str_extract_all_to_tidy_df correctly assigns custom column names", {
text_data <- c("funcA funcB", "funcC")
pattern <- "func[A-C]"
result <- str_extract_all_to_tidy_df(text_data, pattern,
matches_colname = "extracted",
row_number_colname = "index")
expected_colnames <- c("extracted", "index")
expect_equal(colnames(result), expected_colnames)
})
})
