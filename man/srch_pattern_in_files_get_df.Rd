% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/srch_pattern_in_files_get_df.R
\name{srch_pattern_in_files_get_df}
\alias{srch_pattern_in_files_get_df}
\title{Read some files and answer a df, optionnaly try to match a text pattern
e.g., detect a file with a func' defined with 'function_name <- function'}
\usage{
srch_pattern_in_files_get_df(
  files_path = NULL,
  pattern = "(^| \\\\.|\\\\b)([\\\\.A-Za-z0-9_]+)(?=\\\\s*(?:<-)\\\\s*function)",
  match_to_exclude = NULL,
  ignore_match_less_than_nchar = 3,
  file_path_col_name = "file_path",
  content_col_name = "content",
  line_number_col_name = "line_number",
  extracted_txt_col_name = "matches",
  ...
)
}
\arguments{
\item{files_path}{\code{character}
A vector of files path path and/or url.}

\item{pattern}{\code{character}, default = \code{"\\\\b([A-Za-z0-9_]+)(?=\\\\s*(?:<-|=)\\\\s*(?:function|$))"}
A regex for matching lines and extract text. Use the regex for finding a line by extracting text}

\item{match_to_exclude}{\code{character} A vector of values that will not be returned such as a match.
The rows where the \code{values} match any element in this vector will be removed.}

\item{ignore_match_less_than_nchar}{\code{double}, default = 2 Excluding match depending on char. number of the matched text (strictly inferior)
Default exclude match of 1 char such as 'x'.}

\item{file_path_col_name}{\code{character}, default = \code{"file_path"}
Column name for the file path in the output dataframe (first col' of the returned df)}

\item{content_col_name}{\code{character}, default = \code{"content"}
Column name for the file content in the output dataframe.}

\item{line_number_col_name}{\code{character}, default = \code{"line_number"}
Column name for the line numbers in the output dataframe.}

\item{extracted_txt_col_name}{\code{character}, default = \code{"matches"}
Column name for the extracted text (last col' of the returned df)}

\item{...}{Additional arguments passed to \code{readlines_in_df}
For example, keep_comments (\code{logical}, default = \code{FALSE}) for taking into account the commented lines of the files}
}
\value{
A \code{data.frame} with 4 col' :
\describe{
\item{\code{file_path}}{\code{character} The local file path or constructed GitHub URL.}
\item{\code{line_number}}{\code{integer} The line number within the file.}
\item{\code{content}}{\code{character} A line from the file}
}
first (\code{file_path} by default) contain the file_path, then \code{line_number} (by default) , third column (\code{content} by default)
and the LAST ONE contain the matched text, according to the regex provided by the user
}
\description{
| A] Read a bunch of files and answer the content readed in a df
| B] Then try to extract a pattern and return the extracted text  (no match on commented lines by default)
In the 'matched text' part of the result, NA meaning 'no match'
| C] Finally answer a df with all the readed content
Regarding the returned df : the first col' is the file path of all the matched files (first regex passed to list.files)
Last col is the extracted text : this will be the prefix passed by the user, only when there is a complete match
}
\examples{
#Analysing the func of the package, assuming you have installed it :
p_path <- list.files("~", pattern = ".R$",  recursive = TRUE , full.names = TRUE  )
lines_readed <- srch_pattern_in_files_get_df(p_path, .verbose = FALSE)
# Return : a dataframe of links, according to - default - pattern
}
\seealso{
\code{\link{readlines_in_df}}
}
