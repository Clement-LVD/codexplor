% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/srch_pattern_in_files_get_df.R
\name{srch_pattern_in_files_get_df}
\alias{srch_pattern_in_files_get_df}
\title{srch_pattern_in_files_get_df :
\enumerate{
\item take a folder path
\item read all files in the folder
\item match a pattern (regex) and return the extracted text or NA (meaning 'no match')
\item and answer a df with all the readed content
Regarding the extracted content : the user have the possibility to indicate some custom pattern (regex) for matching a complete pattern and extract a part of the text
Regarding the returned df : the first col' is the file path of all the matched files (first regex passed to list.files)
the last col is the extracted text : this will be the prefix passed by the user, only when there is a complete match
the function aim is to associate a matched text to a file path
typically by detecting a classic func' definition such as
function_name <- function(bunch of parameter)
}}
\usage{
srch_pattern_in_files_get_df(
  path_main_folder = getwd(),
  pattern_regex_to_match_and_remove = "<?<- +?function",
  prefix_to_add_to_pattern = ".*",
  recursive_search_for_files = T,
  pattern_regex_list_files = "\\\\.r$",
  ignore_case = T,
  clean_match_from_pattern = T,
  comments = FALSE,
  file_path_col_name = "file_path",
  content_col_name = "content",
  line_number_col_name = "line_number",
  extracted_prefix_col_name = "matches"
)
}
\arguments{
\item{path_main_folder}{\code{character}
Folder where to read all files that match a pattern. Default to current working directory. The files must match the pattern_regex_list_files parameter which is passed to list.files(pattern = )}

\item{pattern_regex_to_match_and_remove}{\code{character}, default = \code{"(<-|\\\\=) +?function"}
A regex for matching lines and extract text : this pattern will be removed from the extracted text. Typically use for finding a line where a R function is defined}

\item{prefix_to_add_to_pattern}{\code{character}, default = \code{".*(?<!FUN)"}
A regex added BEFORE the pattern_regex_to_match_and_remove : used for matching lines, not removed. This is the text you want to have in a new col'}

\item{recursive_search_for_files}{\code{logical}, default = \code{TRUE}
If \code{TRUE} - the default, the files will be searched recursively in the path (including subdirectories)}

\item{pattern_regex_list_files}{\code{character}, default = \code{"\\\\.r$"}
Files to read before to searching for the pattern : passed to list.files(pattern = pattern_regex_list_files). Note that it's not case sensitive}

\item{ignore_case}{\code{logical}, default = \code{TRUE}
If \code{TRUE}, the pattern search (lines matched) will ignore case. If \code{FALSE}, the search will be case-sensitive.}

\item{clean_match_from_pattern}{\code{logical}, default = \code{TRUE}
If \code{TRUE}, the matched pattern is removed from the returned results. If \code{FALSE}, the pattern will remain in the result.}

\item{comments}{\code{logical}, default = \code{FALSE}
If \code{FALSE} - the default, the lines whith a leading # will be removed from the returned df}

\item{file_path_col_name}{\code{character}, default = \code{"file_path"}
Column name for the file path in the output dataframe (first col' of the returned df)}

\item{content_col_name}{\code{character}, default = \code{"content"}
Column name for the file content in the output dataframe.}

\item{line_number_col_name}{\code{character}, default = \code{"line_number"}
Column name for the line numbers in the output dataframe.}

\item{extracted_prefix_col_name}{\code{character}, default = \code{"matches"}
Column name for the extracted text (last col' of the returned df)}
}
\value{
A \code{data.frame} with 4 col' : first (\code{file_path} by default) contain the file_path, then \code{line_number} (by default) contain line_number, third column (\code{content} by default) containing the readed lines from the file and the LAST ONE contain the matched text, according to the regex provided by the user
}
\description{
srch_pattern_in_files_get_df :
\enumerate{
\item take a folder path
\item read all files in the folder
\item match a pattern (regex) and return the extracted text or NA (meaning 'no match')
\item and answer a df with all the readed content
Regarding the extracted content : the user have the possibility to indicate some custom pattern (regex) for matching a complete pattern and extract a part of the text
Regarding the returned df : the first col' is the file path of all the matched files (first regex passed to list.files)
the last col is the extracted text : this will be the prefix passed by the user, only when there is a complete match
the function aim is to associate a matched text to a file path
typically by detecting a classic func' definition such as
function_name <- function(bunch of parameter)
}
}
\examples{
#Analysing the func of the package, assuming you have installed it :
pkg_path <- system.file("R", package = "tidyverse")
#lines_readed <- srch_pattern_in_files_get_df(pkg_path)
# Return : XXX A FAIRE XXX
}
