% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/construct_corpus.R
\name{construct_corpus}
\alias{construct_corpus}
\title{Construct a list of Data Frames of Lines Readed From Files
Within a Local GitHub Repositories and/or Local Folders}
\usage{
construct_corpus(
  folders = NULL,
  languages = "R",
  repos = NULL,
  .verbose = F,
  pattern_to_exclude = NULL,
  fn_to_exclude = "warning",
  ...
)
}
\arguments{
\item{folders}{\code{character}. Default = \code{NULL}. A character vector of local folder paths to scan for code files.}

\item{languages}{\code{character}. Default = \code{"R"}. A character vector specifying the programming language(s) to include in the corpus.}

\item{repos}{\code{character}. Default = \code{NULL}. A character vector of GitHub repository URLs or repository identifiers to extract files from (e.g., \code{"user/repo"}).}

\item{.verbose}{\code{logical}. Default = \code{TRUE}. A logical used to silent the message in console.}

\item{pattern_to_exclude}{\code{character}. Default = \code{NULL}. A character chain with a regex (used to filter out files path)}

\item{fn_to_exclude}{\code{character} A vector of values that will not be returned such as a match.
(prefix or suffix, nchar to append a suffix, etc.).}

\item{...}{
  Arguments passed on to \code{\link[=add_doc_network_to_corpus]{add_doc_network_to_corpus}}
  \describe{
    \item{\code{corpus}}{\code{character} A \code{corpus.list} object from the construct_corpus function}
    \item{\code{matches_colname}}{\code{character}, default = \code{'name'} The name of the column of the \code{functions} df that will be used for construct a regex.}
    \item{\code{content_colname}}{\code{character}, default = \code{'code'} The name of the column of the \code{functions} df that will be used for search a match and extract text.}
    \item{\code{prefix_for_2nd_matches}}{\code{character} A string representing the prefix to add
to each 1st match that will be turned into a new regular expressions. The default is an empty string.}
    \item{\code{suffix_for_2nd_matches}}{\code{character} A string representing a regex to add as a suffix
of each match, in order to have a complete regular expression. The default is an empty string.}
    \item{\code{filter_egolink_within_a_file}}{\code{logical}, default = \code{TRUE}. A logical value indicating whether to filter results based on
"ego links" (a document referring to itself)}
    \item{\code{exclude_quoted_content}}{\code{logical}, default = \code{FALSE}. A logical value indicating if the quoted content should be take into consideration.
If set to \code{TRUE}, text within " or ' over the same line will be suppressed, before to realize the matches}
  }}
}
\value{
A \code{list} of \code{data.frame} containing the corpus of collected files. The data frames includes columns such as:
\describe{
\item{\code{file_path}}{ \code{character} The local file path or constructed GitHub URL.}
\item{\code{line_number}}{\code{integer} The line number of the file.}
\item{\code{content}}{\code{character} The content in a line for the \code{corpus.lines} df, or the full content of the file.}
\item{\code{file_ext}}{\code{character} File extension of the file.}
\item{\code{n_char}}{\code{integer} Number of characters - including spacing - in the entire file (\code{files} df), a line of the file (\code{codes} and \code{comments} df), or within the function code (\code{functions} df).}
\item{\code{n_char_wo_space}}{\code{integer} Number of characters - without spacing - in the entire file (\code{files} df), a line of the file (\code{codes} and \code{comments} df), or within the function code (\code{functions} df)}
\item{\code{n_word}}{\code{integer} Number of words in the entire file (\code{files} df), a line of the file (\code{codes} and \code{comments} df), or within the function code (\code{functions} df).}
\item{\code{n_vowel}}{\code{integer} Number of voyel in the entire file (\code{files} df), a line of the file (\code{codes} and \code{comments} df), or within the function code (\code{functions} df).}
\item{\code{n_total_lines}}{\code{integer} Number of commented lines (\code{comments} df), code lines (\code{codes} df), within the file (\code{files} df), or the function code (\code{functions} df).}
\item{\code{comments}}{\code{logical} \code{TRUE} if the entire line is commented. Set to \code{FALSE} for the \code{codes} df and \code{TRUE} for the \code{comments} df.}
\item{\code{commented}}{\code{character} (only in the \code{codes} df) Inlines comments or NA if there is no inline comments.}
\item{\code{parameters}}{\code{character} (only in the \code{functions} df) The content that define the default parameters of a function.}
\item{\code{code}}{\code{character} (only in the \code{functions} df) The code of a function.}
\item{\code{n_func}}{\code{integer} (only in the \code{files} df) The number of exposed functions within a file.}
\item{\code{n_params}}{\code{integer} (only in the \code{functions} df) The number of parameters of a function.}
\item{\code{freq}}{\code{integer} (only in the \code{files.network} df) The number of functions defined in the 'to' file that are called within a 'from' file.}
\item{\code{from}}{\code{character} (only in the \code{citations.network} df) The function that call another function (\code{functions.network} df) or the local file path or GitHub URL that call a function defined in another file (\code{files.network} df).}
\item{\code{to}}{\code{character} (only in the \code{citations.network} df) The function called (\code{functions.network} df) or the local file path or constructed GitHub URL where the function called is defined (\code{files.network} df).}
\item{\code{file_path_from}}{\code{character} (only in the \code{functions.network} df) The file path of the function that call another function.}
\item{\code{file_path_to}}{\code{character} (only in the \code{functions.network} df) The file path where the function called is defined.}
\item{\code{indeg_fn}}{\code{integer} (only in the \code{files} and \code{functions} df) Number of functions that call this function (\code{functions} df) or number of files with functions that call the functions of this file (\code{files} df).}
\item{\code{outdeg_fn}}{\code{integer} (only in the \code{files} and \code{functions} df) Number of functions called by this function (\code{functions} df) or number of files where the functions called by the functions of this file are defined (\code{files} df).}
}
}
\description{
Given a Language, a folder path(s) and/or github repo(s),
return a \code{list} of 4 dataframes. The list have an additionnal \code{corpus.list} class. The df are :
(1) \code{codes} and (2) \code{comments} with text-metrics about each line;
(3) \code{files} with global metrics over the files, (4) \code{functions} with metrics about the functions of the programming project,
(5) \code{files.network} and (6) \code{functions.network} (networks of internal dependencies).
}
\details{
\itemize{
\item If \code{folders} is provided (one or a list), the function scans the directories and retrieves file paths matching the specified languages.
\item If \code{repos} is provided (one or a list), it constructs URLs to the raw content of files from the specified GitHub repositories.
\item Both local paths and GitHub URLs can be combined in the final output.
}

The returned list is tagged with the class \emph{corpus.list}, and contains the following attributes:
\itemize{
\item \code{date_creation} : \code{Date} a Date indicating when the corpus list was created (as \code{Sys.Date()}).
\item \code{have_citations_network} : a \code{logical} indicating if a network of internal dependancies was processed
(construct_corpus don't return a citations_network so it will be set to  \code{FALSE})
\item \code{languages_patterns} : a list with the default patterns associated with the
requested languages.
\item \code{duplicated_corpus_lines}, \code{logical}. If \code{TRUE}, line(s) of the \code{codes} data.frame are duplicated (must be to \code{FALSE} in near to all cases)
}
}
\examples{
# Example 1: Construct a corpus from local folders
 corpus <- construct_corpus(folders = "~", languages = c( "R", "Python"))
\dontrun{
# Example 2: Construct a corpus from GitHub repositories (default is R)
cr2 <- construct_corpus(repos = c("tidyverse/stringr", "tidyverse/readr") )

# Example 3: Combine local folders and GitHub repositories
cr3 <- construct_corpus("~", "Python", "prabhupant/python-ds", .verbose = TRUE)
}
}
\seealso{
\code{\link{readlines_in_df}}, \code{\link{get_github_raw_filespath}}, \code{\link{get_def_regex_by_language}}, \code{\link{add_doc_network_to_corpus}}

\url{https://clement-lvd.github.io/codexplor/articles/vignette_construct_corpus.html}
}
