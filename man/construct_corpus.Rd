% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/construct_corpus.R
\name{construct_corpus}
\alias{construct_corpus}
\title{Construct a list of 3 Data Frames of Lines Readed From Files
Within a Local GitHub Repositories and/or Local Folders}
\usage{
construct_corpus(
  folders = NULL,
  languages = "R",
  repos = NULL,
  .verbose = F,
  pattern_to_exclude = NULL,
  ...
)
}
\arguments{
\item{folders}{\code{character}. Default = \code{NULL}. A character vector of local folder paths to scan for code files.}

\item{languages}{\code{character}. Default = \code{"R"}. A character vector specifying the programming language(s) to include in the corpus.}

\item{repos}{\code{character}. Default = \code{NULL}. A character vector of GitHub repository URLs or repository identifiers to extract files from (e.g., \code{"user/repo"}).}

\item{.verbose}{\code{logical}. Default = \code{TRUE}. A logical used to silent the message in console.}

\item{pattern_to_exclude}{\code{character}. Default = \code{NULL}. A character chain with a regex (used to filter out files path)}

\item{...}{Additional arguments passed to \code{srch_pattern_in_files_get_df}
(filtering options, depth of folder scanning, names of the returned df columns, .verbose parameter, etc.).}
}
\value{
A \code{list} of 4 \code{data.frame} containing the corpus of collected files and a nodelist :
\code{codes} and \code{comments} (classes \code{data.frame} & \code{corpus.lines}),
\code{functions} and \code{files} (classes \code{data.frame} & \code{corpus.nodelist})
The data frames typically includes columns such as:
\describe{
\item{\code{file_path}}{ \code{character} The local file path or constructed GitHub URL.}
\item{\code{line_number}}{\code{integer} The line number of the file.}
\item{\code{content}}{\code{character} The content in a line for the \code{corpus.lines} df, or the full content of the file (\code{corpus.nodelist} df).}
\item{\code{file_ext}}{\code{character} File extension of the file.}
\item{\code{n_char}}{\code{integer} Number of characters - including spacing - in a line, the file for the \code{files} df, or the function code for the \code{functions} df).}
\item{\code{n_char_wo_space}}{\code{integer} Number of characters - without spacing - in a line, the file for the \code{files} df, or the function code for the \code{functions} df)}
\item{\code{n_word}}{\code{integer} Number of words in a line, the file for the \code{files} df, or the function code for the \code{functions} df).}
\item{\code{n_vowel}}{\code{integer} Number of voyel in a line, the file for the \code{files} df, or the function code for the \code{functions} df).}
\item{\code{n_total_lines}}{\code{integer} Number of commented lines (\code{comments} df), code lines (\code{codes} df), within the file (\code{files} df), or the function code (\code{functions} df).}
\item{\code{comments}}{\code{logical} \code{TRUE} if the entire line is commented. Set to \code{FALSE} for the \code{codes} df and \code{TRUE} for the \code{comments} df.}
\item{\code{commented}}{\code{character} (only in the \code{codes} df) Inlines comments or NA if there is no inline comments.}
\item{\code{parameters}}{\code{character} (only in the \code{functions} df) The content that define the default parameters of a function.}
\item{\code{parameters}}{\code{character} (only in the \code{functions} df) The code of a function.}
}
}
\description{
Given a Language, a folder path(s) and/or github repo(s)
Return a \code{list} of 4 dataframes. The list have an additionnal \code{corpus.list} class. The df are :
(1) \code{codes} lines and (2) \code{comments} lines, with text-metrics about each line;
(3) \code{files} with global metrics over the files, and (4) \code{functions} with metrics about the functions of the programming project.
}
\details{
\itemize{
\item If \code{folders} is provided (one or a list), the function scans the directories and retrieves file paths matching the specified languages.
\item If \code{repos} is provided (one or a list), it constructs URLs to the raw content of files from the specified GitHub repositories.
\item Both local paths and GitHub URLs can be combined in the final output.
}

The returned list is tagged with the class \emph{corpus.list}, and contains the following attributes:
\itemize{
\item \code{date_creation} : \code{Date} a Date indicating when the corpus list was created (as \code{Sys.Date()}).
\item \code{have_citations_network} : a \code{logical} indicating if a network of internal dependancies was processed
(construct_corpus don't return a citations_network so it will be set to  \code{FALSE})
\item \code{languages_patterns} : a list with the default patterns associated with the
requested languages.
\item \code{duplicated_corpus_lines}, \code{logical}. If \code{TRUE}, line(s) of the \code{codes} data.frame are duplicated (must be to \code{FALSE} in near to all cases)
}
}
\examples{
# Example 1: Construct a corpus from local folders
 corpus <- construct_corpus(folders = "~", languages = c( "R"))
 # corpus <- construct_corpus(folders = "~", languages = c("Javascript", "Python"))
\dontrun{
# Example 2: Construct a corpus from GitHub repositories (default is R)
cr2 <- construct_corpus(repos = c("tidyverse/stringr", "tidyverse/readr") )

# Example 3: Combine local folders and GitHub repositories
cr3 <- construct_corpus("~", "R", c("tidyverse/stringr", "tidyverse/readr"))
}
}
\seealso{
\code{\link{readlines_in_df}}, \code{\link{get_github_raw_filespath}}, \code{\link{get_def_regex_by_language}}

\url{https://clement-lvd.github.io/codexplor/articles/vignette_construct_corpus.html}
}
