% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/construct_corpus.R
\name{construct_corpus}
\alias{construct_corpus}
\title{Construct a Data Frame of Code Files from Local GitHub Repositories and/or Local Folders}
\usage{
construct_corpus(
  local_folders_paths = NULL,
  languages = "R",
  repos = NULL,
  pattern_to_exclude_path = NULL,
  autoclean_filespath = TRUE,
  ignore_match_less_than_nchar = 3,
  pattern_to_remove = "https://raw.githubusercontent.com/",
  ...
)
}
\arguments{
\item{local_folders_paths}{\code{character}. Default = \code{NULL}. A character vector of local folder paths to scan for code files.}

\item{languages}{\code{character}. Default = \code{"R"}. A character vector specifying the programming language(s) to include in the corpus.}

\item{repos}{\code{character}. Default = \code{NULL}. A character vector of GitHub repository URLs or repository identifiers to extract files from (e.g., \code{"user/repo"}).}

\item{pattern_to_exclude_path}{\code{character}. A regular expression pattern to exclude files by scanning their full names (path/filename.ext).
Default is \code{NULL} (no files are excluded).}

\item{autoclean_filespath}{\code{logical}. Default = \code{TRUE}.
Codexplor try to exclude testing files \emph{before} to read the files of a project ; and it will try to clean the urls of the returned df
By default, typical testing-purpose .R files are excluded
(i.e. "\.Rcheck|test-")
, in addition to an optional \code{pattern_to_exclude_path} passed by the user.}

\item{ignore_match_less_than_nchar}{\code{integer}. Default = \code{3}. Number of characters for the 1st match to be considered valid.}

\item{pattern_to_remove}{\code{character} Default = \code{'https://raw.githubusercontent.com/'}
A pattern (regex) to remove from the files path of the edgelist (columns 1 & 2)}

\item{...}{Additional arguments passed to \code{srch_pattern_in_files_get_df}
(e.g., filtering criteria, depth of folder scanning, names of returned df col').}
}
\value{
A data frame containing the corpus of collected files. The data frame typically includes columns such as:
\describe{
\item{\code{file_path}}{Character. The local file path or constructed GitHub URL.}
}
}
\description{
This function builds a structured data frame containing code files
from either GitHub repositories or local folder paths.
Then it \strong{try to extract function names} according to a dictionary
of functions definition.
The resulting data frame provides an overview of the collected content,
including file paths, URLs (if applicable), and languages.
}
\details{
\itemize{
\item If \code{local_folders_paths} is provided (one or a list), the function scans the directories and retrieves file paths matching the specified languages.
\item If \code{repos} is provided (one or a list), it constructs URLs to the raw content of files from the specified GitHub repositories.
\item Both local paths and GitHub URLs can be combined in the final output.
}
}
\examples{
# Example 1: Construct a corpus from local folders
corp_myself <- construct_corpus(local_folders_paths = "~", languages = c("R", "Python"))

# Example 2: Construct a corpus from GitHub repositories
corp_strreadr <- construct_corpus(repos = c("tidyverse/stringr", "tidyverse/readr"), "R")

# Example 3: Combine local folders and GitHub repositories
corp_me_and_dplyr <- construct_corpus(c("~", getwd()), repos = "tidyverse/dplyr", c("R", "Cpp"))

}
\seealso{
\code{\link{srch_pattern_in_files_get_df}}, \code{\link{get_github_raw_filespath}}, \code{\link{function_def_regex_by_language}}
}
