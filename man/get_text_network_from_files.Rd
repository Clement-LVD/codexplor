% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_text_network_from_files.R
\name{get_text_network_from_files}
\alias{get_text_network_from_files}
\title{Get Text Network from Files}
\usage{
get_text_network_from_files(
  folder_path = getwd(),
  ignore_match_less_than_nchar = 3,
  first_match_to_exclude = NULL,
  prefix_for_regex_from_the_text = "",
  suffix_for_regex_from_the_text = "",
  regex_to_exclude_files_path = NULL,
  filter_2nd_match_unmatched_lines = T,
  filter_first_match_results = T,
  filter_ego_link = T,
  file_path_from = "from",
  file_path_to = "to",
  match1_colname = "first_match",
  match2_colname = "second_match",
  line_number_match2_colname = "line_number",
  content_match1_col_name = "content_match_1",
  content_match2_col_name = "content_match_2"
)
}
\arguments{
\item{folder_path}{A string representing the path to the folder containing the files
to read. Default is the current working directory.}

\item{ignore_match_less_than_nchar}{Integer that specifies the number of
characters for the 1st match to be considered valid. The default is 3.}

\item{first_match_to_exclude}{A vector of strings to exclude specific results
from the original matches. For example, you can exclude results like \code{"server"}.}

\item{prefix_for_regex_from_the_text}{A string representing the prefix to match in the
text using regular expressions. The default is an empty string.}

\item{suffix_for_regex_from_the_text}{A string representing the suffix (a non-letter or
non-digit character) to match in the text using regular expressions. The default is an
empty string.}

\item{regex_to_exclude_files_path}{A regular expression pattern to exclude certain
files based on their paths. For example, \code{"test-"} can be used to exclude files whose
path includes the word "test". The default is NULL, meaning no files are excluded by path.}

\item{filter_2nd_match_unmatched_lines}{A logical value indicating whether to filter
lines that do not match the second pattern. The default is TRUE.}

\item{filter_first_match_results}{A logical value indicating whether to apply the filter
for the first match. The default is TRUE.}

\item{filter_ego_link}{A logical value indicating whether to filter results based on
"ego links". The default is TRUE.}

\item{file_path_from}{The column name (as a string) representing the "from" file path
in the result data frame. The default is 'from'.}

\item{file_path_to}{The column name (as a string) representing the "to" file path in
the result data frame. The default is 'to'.}

\item{match1_colname}{The column name (as a string) for the first match in the result
data frame. The default is 'first_match'.}

\item{match2_colname}{The column name (as a string) for the second match in the result
data frame. The default is 'second_match'.}

\item{line_number_match2_colname}{The column name (as a string) for the line number
of the second match in the result data frame. The default is 'line_number'.}

\item{content_match1_col_name}{The column name (as a string) for the full content of
the first match. The default is 'content_match_1'.}

\item{content_match2_col_name}{The column name (as a string) for the full content of
the second match. The default is 'content_match_2'.}
}
\value{
A data frame containing the filtered results based on the match criteria, with
columns for file paths, match content, and line numbers.
}
\description{
This function read files in a specified folder (default to only .R files)
extracting and filtering text based on a set of criteria.
It is designed to generate a network of text by cascading (regex) research :
1st the func' try to match a pattern within the files, optionnaly filter the initial results.
Then, a regex-pattern is constructed by appending all the 1st match
and a 2nd research extract this text and construct a network
(1st match finded => exact same text matched elsewhere).
}
\examples{
# Example usage
result <- get_text_network_from_files(folder_path = getwd(),
                                      ignore_match_less_than_nchar = 1,
                                      first_match_to_exclude = c("server"),
                                      regex_to_exclude_files_path = "test-")

# Will return a network of func' from the file path where called => to the file path were defined)

}
\seealso{
\code{\link{srch_pattern_in_files_get_df}}, \code{\link{str_extract_all_to_tidy_df}}, \code{\link{fix_escaping}}
}
