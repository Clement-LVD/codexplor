% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_citations_network_from_df.R
\name{get_citations_network_from_df}
\alias{get_citations_network_from_df}
\title{Construct a Citations Network from Data Frame}
\usage{
get_citations_network_from_df(
  df,
  content_varname = "content",
  pattern_varname = "first_match",
  prefix_for_regex_from_string = "",
  suffix_for_regex_from_string = "",
  keep_only_row_without_a_pattern = TRUE,
  varname_for_matches = "matches",
  n_char_to_add_suffix = 3
)
}
\arguments{
\item{df}{A data frame containing the data to be processed.}

\item{content_varname}{\code{character}, default = \code{"content"} A character string \emph{specifying the name of the column containing the text to be searched}.
Default is "content".}

\item{pattern_varname, }{default = \code{"first_match"} A character string \emph{specifying the name of the column containing the patterns that will be matched}.
Default is "first_match".}

\item{prefix_for_regex_from_string}{\code{character}, default = \code{""} A character string to be used as a prefix in the regex pattern.}

\item{suffix_for_regex_from_string}{\code{character}, default =  \code{""} A character string to be used as a suffix in the regex pattern.}

\item{keep_only_row_without_a_pattern}{\code{logical}, default = \code{TRUE} If \code{TRUE}, keeps only rows with an initial entry for constructing the pattern
(i.e. lines with a character in the \code{pattern_varname} column of the df passed by the user will be filter out)}

\item{varname_for_matches}{\code{character}, default = \code{"matches"} A character string specifying the name of the column of matches in the returned df.}

\item{n_char_to_add_suffix}{\code{double}, default = \code{3}. Minimum number of characters to add the suffix.}
}
\value{
A data frame with the extracted citations network.
}
\description{
Given a \code{dataframe} from the user, the function extracts a network of citations by searching for patterns.
The function will 1st construct a pattern by adding a prefix and a suffix to each text from the \code{pattern_varname} column
Then these pattern are searched in the \code{content_varname} column, returning a df with "line number" where match have occured
}
\details{
The returned data frame has 5 columns:
\describe{
\item{\code{row_number}}{The row number of the original data frame where the text is matched.}
\item{\code{matches}}{The text matched by the pattern, e.g., name of a person.}
\item{\code{content}}{The text content where the pattern was searched, i.e. the column that is identified with \code{content_varname}}
\item{\code{first_match}}{The original pattern searched for (filled with NA if keep_only_row_without_a_pattern is \code{TRUE})}
}
}
\examples{
\dontrun{
df <- data.frame(content = c("Citation (Bob, 2021)", "Another Bob"), first_match = c("Bob" , NA))
get_citations_network_from_df(df  ) # Return only the 2nd line (match 'Bob')
get_citations_network_from_df(df,  keep_only_row_without_a_pattern = FALSE)
#will return the lines (matching 'Bob')
}
}
\seealso{
\code{\link{get_regex_from_vector}}, \code{\link{str_extract_all_to_tidy_df}}
}
