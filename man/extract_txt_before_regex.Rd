% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_txt_before_regex.R
\name{extract_txt_before_regex}
\alias{extract_txt_before_regex}
\title{Extract Text Before a Regex Pattern}
\usage{
extract_txt_before_regex(
  txt_vector = NULL,
  pattern_regex_to_search = NULL,
  prefix_to_add_to_pattern = ".*",
  ignore_case = T,
  clean_match_from_pattern = T,
  filter_only_match = F,
  trimws = T
)
}
\arguments{
\item{txt_vector}{\code{character}
A character vector in which the pattern will be searched and the text before the pattern will be extracted.}

\item{pattern_regex_to_search}{\code{character}
The regex pattern to search for. The matched pattern will be removed by default, unless \code{clean_match_from_pattern} is set to \code{FALSE}.}

\item{prefix_to_add_to_pattern}{\code{character}, default = \code{".*"}
A regex prefix to add before the main pattern. This text will be included in the result, but not removed, by default.}

\item{ignore_case}{\code{logical}, default = \code{TRUE}
If \code{TRUE}, the pattern search will ignore case. If \code{FALSE}, the search will be case-sensitive.}

\item{clean_match_from_pattern}{\code{logical}, default = \code{TRUE}
If \code{TRUE}, the matched pattern is removed from the returned results. If \code{FALSE}, the pattern will remain in the result.}

\item{filter_only_match}{\code{logical}, default = \code{FALSE}
If \code{TRUE}, only the non-NA matches are returned. If \code{FALSE}, the returned vector will have the same length as the input.}

\item{trimws}{\code{logical}, default = \code{TRUE}
If \code{TRUE}, remove leading and tail unwanted white spaces with trimws}
}
\value{
A \code{character} vector of extracted text before the specified pattern. If \code{filter_only_match} is \code{TRUE}, only the matching results are returned.
}
\description{
This function extracts all text - by default - before a specified regex pattern, from a vector of strings.
The extracted text is returned, with optional modifications to remove the matched pattern
or filter non-matching results.
}
\examples{
txt_vector <- c("my_func_one <- function\\\\(", "my_func_2 <- function\\\\(")
object_names <- codexplor::extract_txt_before_regex(txt_vector
, pattern_regex_to_search = " ?(<-|\\\\=)")
# Return : "my_func_one"  "my_func_2"    "another_func"

func_defined <-  codexplor::extract_txt_before_regex(txt_vector
, pattern_regex_to_search = " ?(<-|\\\\=) ?function"
, clean_match_from_pattern = TRUE)
# Return : "my_func_one" "my_func_2"   NA

func_with_suffix_one <-  codexplor::extract_txt_before_regex(txt_vector
, prefix_to_add_to_pattern = ".*_one.*"
, pattern_regex_to_search = " ?(<-|\\\\=) ?function", clean_match_from_pattern = TRUE)
# Return :  "my_func_one" NA            NA
}
