% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_def_regex_by_language.R
\name{get_def_regex_by_language}
\alias{get_def_regex_by_language}
\title{Retrieve function definition regex patterns by programming language(s)}
\usage{
get_def_regex_by_language(languages = "R", ...)
}
\arguments{
\item{languages}{\code{character}, default = \code{"R"} A programming language to match (character strings).}

\item{...}{\code{character} One or more programming language names (character strings).}
}
\value{
A \code{list} where each entry corresponds to a language and contains:
\describe{
\item{\code{language}}{\code{character} The name of the language on a row, e.g., 'R'.}
\item{\code{fn_regex}}{\code{character} A regex dedicated to catch the function names, as soon as a function is defined within a file.}
\item{\code{file_extension }}{\code{character} The typical programming file extension, e.g., ".R" for the R language.}
\item{\code{commented_line_char}}{\code{character} The pattern symbolizing a commented line, i.e. content is commented after that pattern.}
\item{\code{delim_pair}}{\code{character} list indicating the - open and close - characters that symbolizes a multi-lines comment, in addition to the \code{commented_line_char} one-liner syntax.}
\item{\code{pattern_to_exclude }}{\code{character} \verb{The pattern of typical programming files to exclude from the analyses, e.g., "\\\\.Rcheck|test-|vignettes" for the R language.\} \\item\{\code{local_file_ext}\}\{}character\verb{The typical programming file extension turned into a regex, by pasting}"$"\verb{to the end of}file_extension` value.}
}
}
\description{
This function returns a \code{df} with informations for each language (each row),
e.g., file extensions associated and regex pattern for matching commented lines and functions definitions)
for one or more specified programming languages.
}
\details{
This function supports multiple languages in a single call.
Language names are case-insensitive.
}
\examples{
fn_def <- get_def_regex_by_language("Python", "R" , "Go", "C", "JavaScript")
names(fn_def) ; str(fn_def[[1]])
}
